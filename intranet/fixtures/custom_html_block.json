[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "\n\n<div class=\"dashboard-section header-section\">\n    <div class=\"info-row-4\">\n        <div class=\"info-box quote-box\">\n            <h3>üí≠ Quote of the Day</h3>\n            <div class=\"quote-content\">Loading...</div>\n        </div>\n\n        <div class=\"info-box testimonial-box\">\n            <h3>üí¨ Testimonial</h3>\n            <div class=\"testimonial-content\">Loading...</div>\n        </div>\n\n        <div class=\"info-box announcement-box\">                                     \n            <h3>üì¢ Announcements</h3>\n            <div class=\"announcement-content\">Loading...</div>\n        </div>\n\n        <div class=\"info-box faq-box small-faq-box\">\n            <h3>‚ùì FAQ</h3>\n            <div class=\"faq-content\">Loading...</div>\n        </div>\n    \n\n    </div>\n    \n</div>\n\n\n\n\n\n<div class=\"highlight-section\">\n  <div class=\"responsive-grid dashboard-grid-rows\">\n\n    <!-- First row -->\n  <div class=\"dashboard-box\">\n  <h2> Job Openings</h2>\n  <div class=\"job-opening-card-list\" id=\"job_openings_list\"></div>\n</div>\n\n    <div class=\"dashboard-box\">\n      <h2>Upcoming Birthdays</h2>\n      <div class=\"birthday-list\"></div>\n    </div>\n\n    <div class=\"dashboard-box\">\n  <h2>Work Anniversaries / New Joiners</h2>\n  <div class=\"combined-list small-card-list\"></div>\n</div>\n\n\n    <!-- Second row -->\n    \n\n    <div class=\"dashboard-box\">\n      <div class=\"event-box\">\n        <h2 class=\"section-title\">üìÜ Events</h2>\n        <div class=\"events-filter-buttons\">\n          <button class=\"filter-btn active\" data-filter=\"week\" data-section=\"events\">This Week</button>\n          <button class=\"filter-btn\" data-filter=\"month\" data-section=\"events\">This Month</button>\n        </div>\n        <div class=\"event-list\"></div>\n      </div>\n    </div>\n\n    <div class=\"dashboard-box\">\n      <h2><span class=\"trophy\"></span> Leaderboard Points</h2>\n      <div class=\"points-filter-buttons\">\n        \n      </div>\n      <div class=\"points-list\"></div>\n    </div>\n     \n     <div class=\"dashboard-box employee-directory-card\" id=\"employee-directory-box\" onclick=\"window.location.href='/app/query-report/Employee Directory'\" style=\"cursor:pointer;\">\n      <div class=\"icon\"></div>\n      <h2>Employee Directory</h2>\n      <div class=\"count\" id=\"employee-count\">Loading...</div>\n      <div class=\"join-percentage\" id=\"employee-join-percentage\"></div>\n    </div>\n  </div>\n</div>\n\n\n\n\n<div class=\"third-section\">\n  <!-- Box 1: Attendance -->\n  <div class=\"third-section-box\">\n    <h4> Attendance</h4>\n    <div class=\"attendance-wrapper\">\n      <table class=\"table table-bordered table-condensed\" id=\"attendance_table\"></table>\n    </div>\n  </div>\n\n  <!-- Box 2: Task List -->\n  <div class=\"third-section-box\">\n    <h4> Task List</h4>\n    <div class=\"task-wrapper\">\n      <table class=\"table table-bordered table-condensed\" id=\"task_table\"></table>\n    </div>\n  </div>\n</div>\n\n\n\n",
  "modified": "2025-08-11 16:45:13.743243",
  "name": "Intranet",
  "private": 0,
  "roles": [],
  "script": "\n      \n         frappe.call({\n//   method: \"frappe.client.get_list\",   \nmethod: \"intranet.intranet.api.dashboard.get_public_attendance\",\n  args: {\n        doctype: \"Attendance\",\n        filters: {\n          status: [\"in\", [\"On Leave\", \"Work From Home\"]]\n        },\n        fields: [\"employee_name\", \"attendance_date\", \"status\"],\n        order_by: \"attendance_date asc\",\n        limit_page_length: 100\n      },\n      callback: function (r) {\n        const table = root_element.querySelector(\"#attendance_table\");\n    \n        if (r.message && r.message.length > 0) {\n          // üëá Filter for today + next 30 days\n          const today = new Date(frappe.datetime.get_today());\n          const upcomingRecords = r.message.filter(entry => {\n            const entryDate = new Date(entry.attendance_date);\n            const diffDays = (entryDate - today) / (1000 * 60 * 60 * 24);\n            return diffDays >= 0 && diffDays <= 30;\n          });\n    \n          if (upcomingRecords.length === 0) {\n            table.innerHTML = \"<tr><td colspan='3'>No upcoming On Leave or Work From Home records in next 30 days.</td></tr>\";\n            return;\n          }\n    \n          const grouped = groupConsecutiveAttendance(upcomingRecords);\n          renderAttendanceTable(grouped);\n        } else {\n          table.innerHTML = \"<tr><td colspan='3'>No matching records.</td></tr>\";\n        }\n      }\n    });\n    \n    function groupConsecutiveAttendance(records) {\n      const grouped = {};\n      records.forEach(r => {\n        const key = r.employee_name + \"::\" + r.status;\n        if (!grouped[key]) grouped[key] = [];\n        grouped[key].push(r.attendance_date);\n      });\n    \n      // Sort and merge consecutive dates\n      const result = [];\n      Object.keys(grouped).forEach(key => {\n        const [employee, status] = key.split(\"::\");\n        const dates = grouped[key].sort();\n    \n        let start = dates[0];\n        let end = dates[0];\n    \n        const pushRange = () => {\n          result.push({ employee, status, from: start, to: end });\n        };\n    \n        for (let i = 1; i < dates.length; i++) {\n          const prev = new Date(end);\n          prev.setDate(prev.getDate() + 1);\n          const current = new Date(dates[i]);\n    \n          if (prev.toISOString().slice(0, 10) === dates[i]) {\n            end = dates[i]; // Extend range\n          } else {\n            pushRange();\n            start = end = dates[i]; // Start new range\n          }\n        }\n        pushRange();\n      });\n    \n      return result;\n    }\n    \n    function renderAttendanceTable(data) {\n      const table = root_element.querySelector(\"#attendance_table\");\n      let html = `\n        <thead>\n          <tr>\n            <th>Employee</th>\n            <th>Date Range</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n      `;\n    \n      data.forEach(row => {\n        const statusClass = row.status === \"Leave\" ? \"status-leave\" : \"status-wfh\";\n        const formatDate = (dateStr) => {\n      const d = new Date(dateStr);\n      const dd = String(d.getDate()).padStart(2, '0');\n      const mm = String(d.getMonth() + 1).padStart(2, '0');\n      const yy = String(d.getFullYear()).slice(-2);\n      return `${dd}-${mm}-${yy}`;\n    };\n    \n    const dateText = (row.from === row.to)\n      ? formatDate(row.from)\n      : `${formatDate(row.from)} to ${formatDate(row.to)}`;\n    \n    \n        html += `\n          <tr>\n            <td>${row.employee}</td>\n            <td>${dateText}</td>\n    <td>\n      <span class=\"badge ${row.status === 'On Leave' ? 'badge-leave' : 'badge-wfh'}\">\n        ${row.status}\n      </span>\n    </td>\n          </tr>\n        `;\n      });\n    \n      html += \"</tbody>\";\n      table.innerHTML = html;\n    }\n    \n    \n    \n    \n    frappe.call({\n        // method: \"frappe.client.get_list\",\n        method: \"intranet.intranet.api.dashboard.get_public_tasks\",\n        args: {\n          doctype: \"Task\",\n          filters: {\n            status: ['In',[\"Open\", \"Overdue\",\"Pending Review\",\"Working\"]]\n          },\n          fields: [\"name\", \"subject\", \"status\", \"project\", \"priority\"],\n        },\n        callback: function (response) {\n          if (response.message) {\n            populateTaskTable(response.message);\n          } else {\n            console.error(\"No task list data found.\");\n          }\n        },\n        error: function (xhr, status, error) {\n          console.error(\"Error fetching task list:\", error);\n        },\n      });\n    \n      function populateTaskTable(tasks) {\n        var taskTable = root_element.querySelector(\"#task_table\");\n        var tableHTML = \"<thead>\";\n        tableHTML += \"<thead><tr><th>Task ID</th><th>Task</th><th>Status</th><th>Priority</th><th>Project</th></tr></thead>\";\n        tableHTML += \"<tbody>\";\n    \n        tasks.forEach(function (task) {\n          tableHTML += \"<tr>\";\n          tableHTML += \"<td><a href='/app/task/\" + task.name + \"'>\" + task.name + \"</a></td>\";\n          tableHTML += \"<td>\" + task.subject + \"</td>\";\n    \n          var statusColor = task.status === \"Overdue\" ? \"red\" : \"green\";\n          tableHTML += \"<td style='color: \" + statusColor + \";'>\" + task.status + \"</td>\";\n    \n          var priorityColor = \"\";\n          switch(task.priority) {\n            case \"Urgent\":\n              priorityColor = \"red\";\n              break;\n            case \"High\":\n              priorityColor = \"orange\";\n              break;\n            case \"Medium\":\n              priorityColor = \"#8B8000\";\n              break;\n            case \"Low\":\n              priorityColor = \"green\";\n              break;\n            default:\n              priorityColor = \"inherit\";\n          }\n          tableHTML += \"<td style='color: \" + priorityColor + \";'>\" + task.priority + \"</td>\";\n    \n          tableHTML += \"<td><a href='/app/project/\" + task.project + \"'>\" + task.project + \"</a></td>\";\n          tableHTML += \"</tr>\";\n        });\n    \n        tableHTML += \"</tbody>\";\n    \n        taskTable.innerHTML = tableHTML;\n      }\n      \n      \n    \n    \n    \nconst today = frappe.datetime.get_today();\n\nfrappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n        doctype: 'Internal Updates',\n        fields: ['type', 'content', 'display_date', 'person_name', 'is_active'],\n        filters: {\n            display_date: today,\n            docstatus: 1,       // Only submitted\n            is_active: 1        // Only active\n        },\n        order_by: 'display_date desc',\n        limit: 20\n    },\n    callback: function (res) {\n        let todayData = res.message || [];\n\n        // Fetch most recent past entries if today's data is not available for some type\n        function getLatestDataForType(type) {\n            // filter today's entries of given type and active + submitted (already filtered)\n            const todays = todayData.filter(item => item.type === type && item.is_active);\n\n            if (todays.length > 0) {\n                // Return today's entries if any (all active + submitted already)\n                return Promise.resolve(todays);\n            }\n\n            // For announcements, if there are no today's, get most recent past entries\n            return new Promise(resolve => {\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Internal Updates',\n                        fields: ['type', 'content', 'display_date', 'person_name', 'is_active'],\n                        filters: {\n                            type: type,\n                            docstatus: 1,      // only submitted\n                            is_active: 1       // only active\n                        },\n                        order_by: 'display_date desc',\n                        limit: 10\n                    },\n                    callback: function (pastRes) {\n                        const past = pastRes.message || [];\n                        if (past.length === 0) return resolve([]);\n\n                        // Get only the most recent past date's entries (all active and submitted)\n                        const latestDate = past[0].display_date;\n                        const latestEntries = past.filter(item => item.display_date === latestDate);\n                        resolve(latestEntries);\n                    }\n                });\n            });\n        }\n\n        function fadeContent(container, newHtml) {\n            container.classList.remove('fade-in');\n            container.classList.add('fade-out');\n\n            setTimeout(() => {\n                container.innerHTML = newHtml;\n                container.classList.remove('fade-out');\n                container.classList.add('fade-in');\n            }, 400);\n        }\n\n        function rotateEntries(type, selector) {\n            getLatestDataForType(type).then(entries => {\n                const container = root_element.querySelector(selector);\n                if (!entries || entries.length === 0) {\n                    container.innerHTML = `No ${type.toLowerCase()}.`;\n                    return;\n                }\n\n                const items = entries.map(update => `\n                    <div class=\"main-content\">${update.content}</div>\n                    ${update.person_name ? `<div class=\"person-name\">- ${update.person_name}</div>` : ''}\n                `);\n\n                let index = 0;\n                container.innerHTML = items[index];\n                container.classList.add('fade-in');\n\n                if (items.length > 1) {\n                    setInterval(() => {\n                        index = (index + 1) % items.length;\n                        fadeContent(container, items[index]);\n                    }, 5000);  // rotate every 5 seconds per your request\n                }\n            });\n        }\n\n        // Run sections\n        rotateEntries('Quote of the Day', '.quote-content');\n        rotateEntries('Testimonials', '.testimonial-content');\n        rotateEntries('Announcements', '.announcement-content');\n    }\n});\n\n\n\n// //employee directory card\n\n// frappe.call({\n//   method: \"frappe.client.get_count\",\n//   args: {\n//     doctype: \"Employee\",\n//     filters: {\n//       status: \"Active\"\n//     }\n//   },\n//   callback: function (r) {\n//     if (r.message !== undefined) {\n//       const countElement = root_element.querySelector(\"#employee-count\");\n//       countElement.textContent = `${r.message} Employees`;\n//     }\n//   }\n// });\n// Assuming root_element points to your container element\nconst now = new Date();\nconst currentYear = now.getFullYear();\nconst currentMonth = now.getMonth();  // 0-based\n\nconst startDate = new Date(currentYear, currentMonth - 1, 1); // 1st day of last month\nconst endDate = now;                        // today (current date)\n\nfunction formatDate(date) {\n  return date.toISOString().slice(0, 10);\n}\n\nfrappe.call({\n  method: \"frappe.client.get_count\",\n  args: {\n    doctype: \"Employee\",\n    filters: {\n      status: \"Active\"\n    }\n  },\n  callback: function (r) {\n    const totalActive = r.message || 0;\n\n    frappe.call({\n      method: \"frappe.client.get_count\",\n      args: {\n        doctype: \"Employee\",\n        filters: [\n          [\"status\", \"=\", \"Active\"],\n          [\"date_of_joining\", \">=\", formatDate(startDate)],\n          [\"date_of_joining\", \"<=\", formatDate(endDate)]\n        ]\n      },\n      callback: function (res) {\n        const joinedSinceStart = res.message || 0;\n        const percentage = totalActive > 0\n          ? ((joinedSinceStart / totalActive) * 100).toFixed(2)\n          : \"0\";\n\n        const countElement = root_element.querySelector(\"#employee-count\");\n        const joinPctElement = root_element.querySelector(\"#employee-join-percentage\");\n\n        countElement.textContent = `${totalActive} Employees`;\n        joinPctElement.textContent = `${percentage}% joined since ${formatDate(startDate)}`;\n      }\n    });\n  }\n});\n\n\n\nconst makeCard = (emp, extraLines = [], cardClass = '') => `\n    <div class=\"employee-card ${cardClass}\" id=\"card-${emp.name}\">\n        <img src=\"${emp.image || '/assets/frappe/images/ui/avatar.png'}\" />\n        <div class=\"employee-details\">\n            <strong>${emp.employee_name}</strong>\n            <div>${emp.designation || ''}</div>\n            ${extraLines.map(line => `<div>${line}</div>`).join('')}\n        </div>\n        ${emp.isToday ? `<canvas class=\"confetti-canvas\" id=\"confetti-${emp.name}\"></canvas>` : ''}\n    </div>`;\n\nfunction getBirthdayInfo(dob) {\n    const now = new Date();\n    const bday = new Date(dob);\n    bday.setFullYear(now.getFullYear());\n\n    const isToday = bday.getDate() === now.getDate() && bday.getMonth() === now.getMonth();\n    if (bday < now && !isToday) bday.setFullYear(now.getFullYear() + 1);\n\n    return {\n        isToday,\n        upcomingDate: bday,\n        daysLeft: Math.floor((bday - now) / (1000 * 60 * 60 * 24))\n    };\n}\n\nfunction formatDate(date) {\n    return new Date(date).toLocaleDateString('en-IN', { \n        day: 'numeric', month: 'short', year: 'numeric' \n    });\n}\n\nfunction getOrdinal(n) {\n    const suffixes = [\"th\", \"st\", \"nd\", \"rd\"];\n    const v = n % 100;\n    return n + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]);\n}\n\nfrappe.call({\n    method: 'intranet.intranet.api.dashboard.get_all_employee_details',\n    args: {\n        doctype: 'Employee',\n        fields: [\n            'name',\n            'employee_name',\n            'image',\n            'date_of_birth',\n            'date_of_joining',\n            'designation',\n            'company',\n            'status'\n        ],\n        limit: 100\n    },\n    callback: function(res) {\n        if (!res.message) return;\n\n        const now = new Date();\n        const birthdayList = [];\n        const anniversaryList = [];\n        const joinerList = [];\n\n        res.message.forEach(emp => {\n            if (emp.status !== 'Active') return;\n\n            const dob = emp.date_of_birth ? new Date(emp.date_of_birth) : null;\n            const doj = emp.date_of_joining ? new Date(emp.date_of_joining) : null;\n\n            // üéÇ Birthdays in next 60 days\n            if (dob) {\n                const bInfo = getBirthdayInfo(dob);\n                if (bInfo.daysLeft <= 60 || bInfo.isToday) {\n                    birthdayList.push({ ...emp, ...bInfo });\n                }\n            }\n\n            // üéâ Work anniversaries in next 45 days\n            if (doj) {\n                const dojThisYear = new Date(now.getFullYear(), doj.getMonth(), doj.getDate());\n                const daysToAnniversary = Math.floor((dojThisYear - now) / (1000 * 60 * 60 * 24));\n                const years = now.getFullYear() - doj.getFullYear();\n                if (daysToAnniversary >= 0 && daysToAnniversary <= 45 && years >= 1) {\n                    anniversaryList.push({ \n                        ...emp, doj, years, anniversary: dojThisYear, type: 'anniversary' \n                    });\n                }\n            }\n\n            // üëã New joiners in last 45 days\n            if (doj && (now - doj) / (1000 * 60 * 60 * 24) <= 45) {\n                joinerList.push({ \n                    ...emp, doj, type: 'joiner' \n                });\n            }\n        });\n\n        /* ---- SECTION 1: Upcoming Birthdays ---- */\n        birthdayList.sort((a, b) => {\n            if (a.isToday && !b.isToday) return -1;\n            if (!a.isToday && b.isToday) return 1;\n            return a.daysLeft - b.daysLeft;\n        });\n\n        const birthdayContainer = root_element.querySelector('.birthday-list');\n        if (birthdayList.length === 0) {\n            birthdayContainer.innerHTML = `<p class=\"center-message\">No upcoming birthdays.</p>`;\n        } else {\n            birthdayContainer.innerHTML = birthdayList.map(emp => \n                makeCard(emp, [`üéÇ Birthday: ${formatDate(emp.upcomingDate)}`], emp.isToday ? 'birthday-today' : 'birthday-card')\n            ).join('');\n        }\n\n        /* ---- SECTION 2: Work Anniversaries / New Joiners ---- */\n        const combinedList = [...anniversaryList, ...joinerList];\n\n       combinedList.sort((a, b) => {\n    const dateA = a.type === 'anniversary' ? a.anniversary : a.doj;\n    const dateB = b.type === 'anniversary' ? b.anniversary : b.doj;\n\n    const now = new Date();\n    const diffA = Math.abs(dateA - now);\n    const diffB = Math.abs(dateB - now);\n\n    return diffA - diffB;\n});\n\n\n        const combinedContainer = root_element.querySelector('.combined-list');\n        if (combinedList.length === 0) {\n            combinedContainer.innerHTML = `<p class=\"center-message\">No upcoming anniversaries or recent joiners.</p>`;\n        } else {\n            combinedContainer.innerHTML = combinedList.map(emp => {\n                if (emp.type === 'anniversary') {\n                    return makeCard(emp, [`üéâ ${getOrdinal(emp.years)} Anniversary on ${formatDate(emp.anniversary)}`], 'anniversary-card');\n                } else {\n                    return makeCard(emp, [`üëã Joined: ${formatDate(emp.doj)}`], 'joiner-card');\n                }\n            }).join('');\n        }\n\n        /* üéä Confetti for today's birthdays */\n        if (birthdayList.some(emp => emp.isToday)) {\n            setTimeout(() => {\n                confetti({\n                    particleCount: 150,\n                    spread: 80,\n                    origin: { y: 0.6 },\n                    zIndex: 9999\n                });\n            }, 500);\n        }\n    }\n});\n\n\n    \n\n\n\n// üìÖ Always get the current month's date range\nfunction getDateRangeThisMonth() {\n    return {\n        start: frappe.datetime.month_start(),\n        end: frappe.datetime.month_end()\n    };\n}\n\n// üóì Get current Month + Year text like \"August 2025\"\nfunction getCurrentMonthYear() {\n    const now = new Date();\n    return now.toLocaleString('default', { month: 'long', year: 'numeric' });\n}\n\n// üèÜ Load leaderboard points for this month\nfunction loadLeaderboardPoints() {\n    const { start, end } = getDateRangeThisMonth();\n\n    frappe.call({\n        method: 'intranet.intranet.api.dashboard.get_energy_point_logs',\n        args: { start_date: start, end_date: end },\n        callback: function (res) {\n            const logs = res.message || [];\n            const userPoints = {};\n\n            // Aggregate points per user\n            logs.forEach(log => {\n                if (!log.user) return;\n                userPoints[log.user] = (userPoints[log.user] || 0) + Number(log.points);\n            });\n\n            const users = Object.keys(userPoints);\n            if (users.length === 0) {\n                renderLeaderboard({}, {});\n                return;\n            }\n\n            // Fetch Employee Details with `user_id` first\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Employee',\n                    filters: { user_id: ['in', users] },\n                    fields: ['user_id', 'employee_name'],\n                    limit_page_length: 1000\n                },\n                callback: function (empRes) {\n                    let empMap = {};\n                    (empRes.message || []).forEach(emp => {\n                        empMap[emp.user_id] = emp.employee_name;\n                    });\n\n                    if (Object.keys(empMap).length === 0) {\n                        // Try with 'user' field if user_id is not matching\n                        frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Employee',\n                                filters: { user: ['in', users] },\n                                fields: ['user', 'employee_name'],\n                                limit_page_length: 1000\n                            },\n                            callback: function (empRes2) {\n                                (empRes2.message || []).forEach(emp => {\n                                    empMap[emp.user] = emp.employee_name;\n                                });\n                                renderLeaderboard(userPoints, empMap);\n                            }\n                        });\n                    } else {\n                        renderLeaderboard(userPoints, empMap);\n                    }\n                }\n            });\n        }\n    });\n}\n\n// üé® Render Top 3 Leaderboard\nfunction renderLeaderboard(userPoints, empMap) {\n    const container = root_element.querySelector('.points-list');\n    container.innerHTML = ''; // Clear previous content\n\n    // Subtitle\n    const subHeading = document.createElement('h4');\n    subHeading.textContent = `Top Performers ‚Äì ${getCurrentMonthYear()}`;\n    subHeading.style.textAlign = 'center';\n    subHeading.style.fontWeight = 'normal';\n    subHeading.style.color = '#666';\n    subHeading.style.marginBottom = '15px';\n    container.appendChild(subHeading);\n\n    if (!userPoints || Object.keys(userPoints).length === 0) {\n        const noData = document.createElement('p');\n        noData.style.textAlign = 'center';\n        noData.innerText = 'No points found.';\n        container.appendChild(noData);\n        return;\n    }\n\n    // Sort by points, take top 3\n    const ranked = Object.entries(userPoints)\n        .map(([user, points]) => ({\n            employee_name: empMap[user] || formatFallbackName(user),\n            points\n        }))\n        .sort((a, b) => b.points - a.points)\n        .slice(0, 3);\n\n    const medals = ['ü•á', 'ü•à', 'ü•â'];\n\n    ranked.forEach((entry, i) => {\n        const div = document.createElement('div');\n        div.className = 'points-card' + (i === 0 ? ' glow' : '');\n        div.innerHTML = `\n            <span class=\"medal\">${medals[i]}</span>\n            <div class=\"info\">\n                <div class=\"name\">${entry.employee_name}</div>\n                <div class=\"points\">${entry.points} points</div>\n            </div>\n        `;\n        container.appendChild(div);\n    });\n}\n\n// üë§ Format name from email if no employee name exists\nfunction formatFallbackName(userId) {\n    if (!userId) return 'Unknown';\n    const namePart = userId.split('@')[0] || userId;\n    return namePart\n        .split(/[._]/)\n        .map(w => w.charAt(0).toUpperCase() + w.slice(1))\n        .join(' ');\n}\n\n// üìå Load leaderboard on page ready\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    loadLeaderboardPoints();\n});\n\n\n\n\n\n// üéØ Helper: Get date range based on filter\nfunction getDateRange(filter) {\n  const today = frappe.datetime.get_today();\n  \n  if (filter === 'week') {\n    return {\n      start: frappe.datetime.week_start(),\n      end: frappe.datetime.week_end()\n    };\n  }\n  \n  if (filter === 'month') {\n    return {\n      start: frappe.datetime.month_start(),\n      end: frappe.datetime.month_end()\n    };\n  }\n  \n  // Default: just today\n  return { start: today, end: today };\n}\n\n// üéØ Helper: Date filter for leaderboard logs\nfunction getDateFilterForLeaderboard(filter) {\n  const { start, end } = getDateRange(filter);\n  return {\n    creation: ['between', [start, end]]\n  };\n}\n\n// üìÖ Load events list\nfunction loadEvents(filter = 'week') {\n  const { start, end } = getDateRange(filter);\n\n  frappe.call({\n    method: 'intranet.intranet.api.dashboard.get_employee_events',\n    args: {\n      start: start,\n      end: end\n    },\n    callback: function (res) {\n      const list = res.message || [];\n      const container = root_element.querySelector('.event-list');\n      \n      container.innerHTML = list.length === 0\n        ? '<p>No events found.</p>'\n        : list.map(evt => {\n            const dt = frappe.datetime.str_to_obj(evt.starts_on);\n            const datePart = frappe.datetime.obj_to_user(dt).split(' ')[0];\n            const timePart = dt.toLocaleTimeString('en-IN', {\n              hour: '2-digit',\n              minute: '2-digit'\n            });\n\n            return `\n              <div class=\"event-card\">\n                <div class=\"event-date\">\n                  <strong>${datePart}</strong>\n                  <span class=\"event-time\">${timePart}</span>\n                </div>\n                <div class=\"event-subject\">üìå ${evt.subject}</div>\n              </div>\n            `;\n          }).join('');\n    }\n  });\n}\n\n// üîÑ Filter buttons for both leaderboard and events\nroot_element.querySelectorAll('.filter-btn').forEach(btn => {\n  btn.addEventListener('click', () => {\n    const section = btn.dataset.section;\n    const filter = btn.dataset.filter;\n\n    // Remove previous active buttons in the same section\n    root_element.querySelectorAll(`.filter-btn[data-section=\"${section}\"]`)\n      .forEach(b => b.classList.remove('active'));\n\n    btn.classList.add('active');\n\n    if (section === 'events') loadEvents(filter);\n    if (section === 'leaderboard') loadLeaderboardPoints(filter);\n  });\n});\n\n// üîÉ Initial loads\nloadLeaderboardPoints('week');\nloadEvents('week');\n\n\n\n\n\n\nfrappe.call({\n  method: \"intranet.intranet.api.dashboard.get_open_jobs_with_applicant_count\",\n  args: { limit: 10 },\n  callback: function (r) {\n    if (!root_element) {\n      console.error(\"root_element is not defined\");\n      return;\n    }\n    const container = root_element.querySelector(\"#job_openings_list\");\n\n    if (r.message && r.message.length > 0) {\n      const cards = r.message.map(job => {\n        const postedOn = job.posted_on ? frappe.datetime.str_to_user(job.posted_on.substr(0,10)) : '-';\n        const closesOn = job.closes_on ? frappe.datetime.str_to_user(job.closes_on.substr(0,10)) : '-';\n\n        return `\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <a href=\"/app/job-opening/${job.name}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-primary fw-bold\">\n                ${job.job_title}\n              </a>\n            </div>\n            <div class=\"card-body\">\n              <p class=\"mb-1\"><strong>Designation: </strong> ${job.designation || '-'}</p>\n              <p class=\"mb-1\"><strong>Employment Type: </strong> \n                <span class=\"badge bg-info text-dark\">${job.employment_type || '-'}</span>\n              </p>\n              <p class=\"mb-1\"><strong>Location: </strong> ${job.location || '-'}</p>\n              <p class=\"mb-1 text-muted\"><small>üóìÔ∏è Posted On: ${postedOn}</small></p>\n              <p class=\"mb-0 text-muted\"><small>‚è≥ Closes On: ${closesOn}</small></p>\n              <p class=\"mb-0 text-muted\"><small>üë• No. of Applicants: ${job.applicant_count || 0}</small></p>\n            </div>\n          </div>\n        `;\n      }).join('');\n\n      container.innerHTML = cards;\n    } else {\n      container.innerHTML = `<div class=\"text-muted text-center my-3\">No open job openings found.</div>`;\n    }\n  }\n});\n",
  "style": "\n\n\n.third-section {\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n  width: 100%;\n  margin-top: 10px;\n}\n\n/* Ensure exactly 50% width */\n.third-section-box {\n  width: 50%;\n}\n\n/* Table Wrappers */\n.attendance-wrapper,\n.task-wrapper {\n  max-height: 180px;\n  overflow-y: auto;\n  border: 1px solid #e0e0e0;\n  border-radius: 6px;\n}\n\n/* Common Table Styles */\n#attendance_table,\n#task_table {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 13px;\n}\n\n#attendance_table thead,\n#task_table thead {\n  background-color: #f8f8f8;\n  font-weight: 600;\n}\n\n#attendance_table th,\n#attendance_table td,\n#task_table th,\n#task_table td {\n  padding: 6px 10px;\n  border-bottom: 1px solid #eee;\n}\n\n/* Attendance Status Colors */\n#attendance_table td.status-leave {\n  color: #d9534f;\n  font-weight: bold;\n}\n\n#attendance_table td.status-wfh {\n  color: #0275d8;\n  font-weight: bold;\n}\n\n/* Scrollbar Styling */\n.attendance-wrapper::-webkit-scrollbar,\n.task-wrapper::-webkit-scrollbar {\n  width: 5px;\n}\n.attendance-wrapper::-webkit-scrollbar-thumb,\n.task-wrapper::-webkit-scrollbar-thumb {\n  background: #ccc;\n  border-radius: 5px;\n}\n\n/* Badges */\n.badge {\n  display: inline-block;\n  padding: 2px 8px;\n  font-size: 12px;\n  font-weight: 500;\n  border-radius: 10px;\n  text-transform: capitalize;\n}\n\n.badge-leave {\n  background-color: #f8d0c1;\n  color: #bd3e0c;\n}\n\n.badge-wfh {\n  background-color: #cce7f8;\n  color: #0070cc;\n}\n\n\n.header-section {\n  height: 170px; /* or any height you prefer */\n  overflow: hidden;\n  margin-bottom: 20px;\n}\n\n.info-row-4 {\n  display: flex;\n  gap: 12px;\n  height: 100%;\n}\n\n.info-box {\n  flex: 1;\n  background: #f9f9f9;\n  border-radius: 10px;\n  padding: 14px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.04);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  overflow: hidden;\n}\n\n.info-box h3 {\n  font-size: 16px;\n  margin-bottom: 6px;\n}\n\n\n\n/* 4-column row layout */\n.info-row-4 {\n    display: flex;\n    gap: 12px;\n    justify-content: space-between;\n    padding: 10px;\n    margin-bottom: 16px;\n    flex-wrap: nowrap;\n    align-items: stretch;\n}\n\n/* Card-style box */\n.info-box {\n    background: #fff;\n    border: 1px solid #e3e6eb;\n    border-radius: 8px;\n    padding: 16px;\n    box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n    transition: all 0.3s ease;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    font-family: \"Inter\", sans-serif;\n}\n\n\n\n/* Fade Animations */\n/* Fade Animations */\n.quote-content,\n.testimonial-content,\n.announcement-content,\n.faq-content {\n  opacity: 1;\n  transition: opacity 0.4s ease;\n  min-height: 40px;\n}\n\n.fade-out {\n  opacity: 0;\n  transition: opacity 0.4s ease-out;\n}\n\n.fade-in {\n  opacity: 1;\n  transition: opacity 0.4s ease-in;\n}\n\n\n.info-box {\n  display: block; /* or flex with justify-content: flex-start */\n  height: auto;   /* avoid fixed heights unless required */\n}\n\n\n.faq-box {\n  display: none !important;\n}\n\n\n.person-name {\n    margin-top: 6px; /* reduced margin */\n    font-style: italic;\n    font-size: 0.85em; /* slightly smaller font */\n    color: #555;\n}\n\n\n/* Main grid container: 3 columns */\n.dashboard-grid-rows {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n/* First 3 boxes in first row */\n.dashboard-grid-rows > .dashboard-box:nth-child(-n+3) {\n  grid-row: 1;\n}\n\n/* Next 3 boxes in second row */\n.dashboard-grid-rows > .dashboard-box:nth-child(n+4):nth-child(-n+6) {\n  grid-row: 2;\n}\n\n/* Common dashboard box styling */\n.dashboard-grid-rows > .dashboard-box {\n  background: #fff;\n  padding: 10px;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n  display: flex;\n  flex-direction: column;\n  max-height: 370px;\n  overflow-y: auto;\n  box-sizing: border-box;\n}\n\n/* Employee Directory card: half width */\n.employee-directory-card,\n#employee-directory-box {\n  grid-column: span 1.5;\n  max-width: 50%;\n  cursor: pointer;\n  /* Add consistent styling if employee-directory-card used standalone */\n  background: #fff;\n  padding: 10px;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n  display: flex;\n  flex-direction: column;\n  max-height: 370px;\n  overflow-y: auto;\n  box-sizing: border-box;\n}\n\n/* Other cards on second row take remaining space */\n.dashboard-grid-rows > .dashboard-box:nth-child(n+4):not(.employee-directory-card):not(#employee-directory-box) {\n  grid-column: span 1.5;\n}\n\n/* Pointer cursor specifically for employee-directory-box */\n#employee-directory-box {\n  cursor: pointer;\n}\n\n/* Dashboard box headings */\n.dashboard-box h2 {\n  font-size: 18px;\n  color: #2f2f2f;\n  margin-top: 8px;\n  margin-bottom: 5px;\n  text-align: center;\n  font-weight: 600;\n}\n\n/* hr spacing */\nhr {\n  margin: 0px 19px;\n}\n\n/* Birthday container - max 3 cards visible, hide scrollbar but allow scrolling */\n.birthday-list {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  max-height: 360px;\n  overflow-y: auto;                  /* Enable vertical scrolling */\n  padding-right: 5px;\n\n  /* Hide scrollbar in Firefox */\n  scrollbar-width: none !important;\n\n  /* Hide scrollbar in IE / Edge (legacy) */\n  -ms-overflow-style: none !important;\n}\n\n/* Hide scrollbar in Chrome, Safari, Edge (WebKit browsers) */\n.birthday-list::-webkit-scrollbar {\n  width: 0;\n  height: 0;\n  display: none !important;          /* Fully hide scrollbar */\n}\n\n\n.combined-list {\n  display: flex;\n  flex-direction: column;\n  gap: 0px;\n  overflow-y: auto;\n  padding-right: 5px;\n\n  /* Hide scrollbar - cross-browser */\n  scrollbar-width: none;        /* Firefox */\n  -ms-overflow-style: none;     /* Internet Explorer / Edge */\n}\n\n/* Hide scrollbar for WebKit browsers (Chrome, Safari, etc.) */\n.combined-list::-webkit-scrollbar {\n  display: none;\n}\n\n    /* Hide scrollbar in Firefox */\n  scrollbar-width: none !important;\n\n  /* Hide scrollbar in IE / Edge (legacy) */\n  -ms-overflow-style: none !important;\n}\n\n}\n\n/* Center message style */\n.center-message {\n  text-align: center;\n  color: #888;\n  font-size: 1.1em;\n  margin: 24px 0;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100px;\n}\n\n/* Small employee cards */\n/*Work Anniversaries / New Joiners*/\n.small-card-list {\n  display: flex;\n  flex-direction: column;\n  gap: 17px;\n}\n\n/* Employee card styling */\n.employee-card {\n  display: flex;\n  align-items: center;\n  background: #f9f9f9;\n  padding: 7px;\n  border-radius: 10px;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n}\n\n.employee-card img {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 12px;\n  border: 2px solid #ccc;\n}\n\n.employee-details {\n  display: flex;\n  flex-direction: column;\n}\n\n.employee-details strong {\n  font-size: 15px;\n  font-weight: 600;\n}\n\n.employee-details div {\n  font-size: 13px;\n  color: #555;\n}\n\n/* Leaderboard Points Cards styling */\n.points-list {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.points-card {\n  display: flex;\n  align-items: flex-start;\n  gap: 14px;\n  padding: 14px 18px;\n  background-color: #f9f9f9;\n  border-radius: 12px;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.05);\n  transition: transform 0.3s ease;\n}\n\n\n.medal {\n  font-size: 24px;\n  margin-top: 4px;\n}\n\n.info {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.name {\n  font-weight: 600;\n  font-size: 16px;\n  color: #333;\n}\n\n.points {\n  font-size: 14px;\n  color: #666;\n  margin-top: 2px;\n}\n\n/* Trophy animation */\n.trophy {\n  display: inline-block;\n  animation: trophy-pulse 1.2s infinite ease-in-out;\n}\n\n/* Buttons Container styling */\n.points-filter-buttons,\n.events-filter-buttons {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.filter-btn {\n  background-color: #f0f0f0;\n  border: none;\n  padding: 6px 12px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  color: #2f2f2f;\n  transition: transform 0.1s ease, background-color 0.2s ease;\n}\n\n.filter-btn.active {\n  background-color: #343a40;\n  color: white;\n}\n\n.filter-btn:active {\n  transform: scale(0.92);\n}\n/* Event List Styling - hide scrollbar but keep scrolling */\n/* Event List Styling - hide scrollbar but keep scrolling */\n/* Make ONLY the event list scroll */\n.event-list {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-height: 360px;           /* About 3 cards */\n  overflow-y: auto;\n  padding-right: 5px;\n\n  /* Hide scrollbar */\n  scrollbar-width: none !important;\n  -ms-overflow-style: none !important;\n}\n.event-list::-webkit-scrollbar {\n  display: none !important;\n}\n\n/* Card style */\n.event-card {\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 12px 16px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n  gap:17px\n}\n\n/* Date and Subject styles */\n.event-date {\n  font-size: 13px;\n  color: #6c757d;\n  margin-bottom: 4px;\n}\n.event-time {\n  font-size: 12px;\n  color: #999;\n}\n.event-subject {\n  font-size: 14px;\n  font-weight: 500;\n  color: #343a40;\n}\n/* Prevent parent containers from scrolling */\n.dashboard-box,\n.event-box {\n  overflow: hidden;              /* No scrolling inside these */\n  \n  /* Hide scrollbar styles just in case they overflow */\n  scrollbar-width: none !important;   /* Firefox */\n  -ms-overflow-style: none !important; /* IE/Edge */\n}\n.dashboard-box::-webkit-scrollbar,\n.event-box::-webkit-scrollbar {\n  display: none !important; /* Chrome/Safari */\n}\n.event-box.frappe-card {\n  border: none !important;        /* Removes any visible border */\n  box-shadow: none;               /* Optional: remove shadow too if you want it flat */\n}\n\n\n\n\n\n\n\n/* Employee Directory Card styling */\n.employee-directory-card {\n  width: 100%; /* Full width inside grid cell */\n  /* Optional fixed height if needed */\n  min-height: 180px;\n  background-color: #ffffff;\n  border: 1px solid #e2e2e2;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n  padding: 10px;\n  text-align: center;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  user-select: none;\n  box-sizing: border-box;\n  transition: box-shadow 0.2s ease;\n}\n\n\n\n.employee-directory-card .icon {\n  font-size: 26px;\n  margin-top: 4px;\n  margin-bottom: 8px;\n}\n\n.employee-directory-card .title {\n  font-size: 15px;\n  font-weight: 600;\n  color: #343a40;\n}\n\n.employee-directory-card .subtitle {\n  font-size: 12px;\n  color: #666;\n  margin-top: 2px;\n  margin-bottom: 12px;\n}\n.employee-directory-card,\n#employee-directory-box {\n  width: 300px;           /* Fixed width */\n  max-width: none;        /* Prevent grid‚Äôs max-width */\n  grid-column: auto !important; /* Disable spanning if needed */\n  cursor: pointer;\n  box-sizing: border-box;\n\n  /* Other existing styles */\n  background: #fff;\n  padding: 10px;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n  display: flex;\n  flex-direction: column;\n  max-height: 100px;\n  overflow-y: auto;\n}\n\n.employee-directory-card .count {\n  font-size: 18px;\n  font-weight: 600;\n  color: #007bff;\n  line-height: 1.2;\n  white-space: nowrap;\n}\n\n.employee-directory-card .join-percentage {\n  font-size: 13px;\n  font-weight: 500;\n  color: #28a745;\n  margin-top: 6px;\n  white-space: nowrap;\n}\n\n/* Responsive: Stack on narrow screens */\n@media (max-width: 900px) {\n  .dashboard-grid-rows {\n    grid-template-columns: 1fr;\n  }\n\n  #employee-directory-box,\n  .employee-directory-card,\n  .dashboard-grid-rows > .dashboard-box {\n    grid-column: span 1 !important;\n    max-width: 100% !important;\n  }\n}\n\n\n#job-opening-box {\n  /* Existing dashboard-box styles apply */\n  /* Add any specific height or padding if you want */\n  max-height: 370px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n}\n\n#job-opening-box h2 {\n  font-size: 18px;\n  font-weight: 600;\n  color: #2f2f2f;\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n/* Job openings list container */\n#job-opening-list {\n  margin-top: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  padding-right: 5px;\n  overflow-y: auto;\n}\n\n/* Individual job opening card */\n.job-opening-card {\n  background: #f8f9fa;\n  border-radius: 10px;\n  padding: 10px 12px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\n  font-size: 13px;\n  color: #333;\n  cursor: default;\n  transition: background-color 0.2s ease;\n}\n\n.job-opening-card:hover {\n  background: #e2e6ea;\n}\n\n.job-opening-card h3 {\n  font-size: 15px;\n  font-weight: 600;\n  margin-bottom: 6px;\n  color: #007bff;\n}\n\n.job-opening-card p {\n  margin: 2px 0;\n  line-height: 1.3;\n}\n\n.job-opening-card p strong {\n  color: #555;\n}\n\n/* Responsive for narrow screens */\n@media (max-width: 600px) {\n  #job-opening-box {\n    max-height: none;\n  }\n\n  .job-opening-card {\n    font-size: 14px;\n    padding: 12px;\n  }\n}\n\n\n\n\n<style>\n.job-opening-card-list {\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  max-height: 340px;\n  overflow-y: auto;\n  padding-right: 5px;\n}\n\n.job-card {\n  background: #fff;\n  padding: 14px;\n  border-radius: 10px;\n  border: 1px solid #dcdcdc;\n  box-shadow: none;\n  display: flex;\n  flex-direction: column;\n}\n\n.job-title a {\n  font-size: 15px;\n  font-weight: 600;\n  color: #000;\n  text-decoration: none;\n}\n\n.job-title a:hover {\n  text-decoration: underline;\n}\n\n.job-meta {\n  font-size: 13px;\n  color: #333;\n  margin-top: 5px;\n  line-height: 1.4;\n}\n\n.posted-on {\n  font-size: 12px;\n  color: #555;\n}\n\n.no-jobs {\n  font-size: 14px;\n  padding: 10px;\n  color: #999;\n}\n\n.job-opening-card-list::-webkit-scrollbar {\n    \n  width: 5px;\n}\n.job-opening-card-list::-webkit-scrollbar-thumb {\n  background-color: #aaa;\n  border-radius: 5px;\n}\n</style>\n.card {\n  border: 1px solid #dee2e6;\n  border-radius: 4px;\n  padding: 12px 16px;\n  background-color: #fff;\n  margin-bottom: 12px;\n  box-shadow: none;\n}\n\n.card-header {\n  font-size: 16px;\n  margin-bottom: 8px;\n  /* Optional: to align header text nicely */\n  font-weight: 600; /* equivalent of .fw-bold */\n}\n\n.fw-bold {\n  font-weight: 600;\n}\n\n.text-primary {\n  color: #0b5ed7;\n}\n\n.badge.bg-info {\n  background-color: #cff4fc;\n  color: #055160; /* Moved text color here for better maintainability */\n  padding: 0.25em 0.5em;\n  border-radius: 0.25rem;\n  font-size: 0.875em;\n  font-weight: 600;\n  display: inline-block;\n  line-height: 1;\n}\n.badge.bg-info {\n  background-color: #000000;  /* Black background */\n  color: #ffffff;             /* White text for contrast */\n  padding: 0.25em 0.5em;\n  border-radius: 0.25rem;\n  font-size: 0.875em;\n  font-weight: 600;\n  display: inline-block;\n  line-height: 1;\n  border: none;               /* No border */\n}\n\n/* For Chrome, Edge & Safari */\n.job-opening-card-list::-webkit-scrollbar {\n  width: 0;\n  height: 0;\n  display: none; /* Optional, for some browsers */\n}\n\n/* For Firefox */\n.job-opening-card-list {\n  scrollbar-width: none;  /* Firefox */\n  -ms-overflow-style: none; /* Internet Explorer and Edge */\n}\n\n/* Hide scrollbar for IE, Edge, and Firefox */\n.job-opening-card-list {\n  overflow-y: auto; /* Or scroll if you want always visible scroll area */\n}\n\n/* Remove .text-dark separate class since color is already integrated in .badge.bg-info */\n/* Just keep .text-primary and .fw-bold separate if used elsewhere */\n\n"
 }
]