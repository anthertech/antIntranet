[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "\n\n<div class=\"dashboard-section header-section\">\n    <div class=\"info-row-4\">\n        <div class=\"info-box quote-box\">\n            <h3>üí≠ Quote of the Day</h3>\n            <div class=\"quote-content\"></div>\n        </div>\n        <div class=\"info-box announcement-box\">\n            <h3>üì¢ Announcements</h3>\n            <div class=\"announcement-content\"></div>\n        </div>\n        <div class=\"dashboard-box employee-directory-card\" id=\"employee-directory-box\" onclick=\"window.location.href='/app/query-report/Employee Directory'\">\n            <div class=\"icon\"></div>\n            <h2>Employee Directory</h2>\n            <div class=\"count\" id=\"employee-count\"></div>\n            <div class=\"join-percentage\" id=\"employee-join-percentage\"></div>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n<div class=\"highlight-section\">\n  <div class=\"responsive-grid dashboard-grid-rows\">\n\n    <!-- First row -->\n  <div class=\"dashboard-box\">\n  <h2 id=\"job_openings_title\" class=\"mb-3\">Job Openings</h2>\n  <div class=\"job-opening-card-list\" id=\"job_openings_list\"></div>\n</div>\n    <div class=\"dashboard-box\">\n      <h2>Upcoming Birthdays</h2>\n      <div class=\"birthday-list\"></div>\n    </div>\n\n    <div class=\"dashboard-box\">\n  <h2>Work Anniversaries / New Joiners</h2>\n  <div class=\"combined-list small-card-list\"></div>\n</div>\n\n\n    <!-- Second row -->\n    \n\n    <div class=\"dashboard-box\">\n      <div class=\"event-box\">\n        <h2 class=\"section-title\">üìÜ Events</h2>\n        <div class=\"events-filter-buttons\">\n          <button class=\"filter-btn active\" data-filter=\"week\" data-section=\"events\">This Week</button>\n          <button class=\"filter-btn\" data-filter=\"month\" data-section=\"events\">This Month</button>\n        </div>\n        <div class=\"event-list\"></div>\n      </div>\n    </div>\n\n    <div class=\"dashboard-box\">\n  <h2 id=\"leaderboard-heading\">\n    <span class=\"trophy\">üèÜ</span> Leaderboard Points <span id=\"month-year\"></span>\n  </h2>\n  <div class=\"points-filter-buttons\"></div>\n  <div class=\"points-list\"></div>\n</div>\n\n     \n     \n     \n     \n  <!-- Box 1: Task List -->\n   <div class=\"dashboard-box\">\n    <h4> Task List</h4>\n    <div class=\"task-wrapper\" id=\"task_wrapper\"></div>\n  </div>\n  <!-- Box 2: Attendance -->\n  <div class=\"dashboard-box\">\n    <h4> Attendance</h4>\n    <div class=\"attendance-wrapper\" id=\"attendance_wrapper\"></div>\n  </div>\n\n     \n     \n     \n  </div>\n</div>\n\n\n\n\n\n\n\n",
  "modified": "2025-08-29 18:24:41.680237",
  "name": "Intranet",
  "private": 0,
  "roles": [],
  "script": "\n    \nfrappe.call({\n  method: \"intranet.intranet.api.dashboard.get_public_attendance\",\n  args: {\n    doctype: \"Attendance\",\n    filters: {\n      status: [\"in\", [\"On Leave\", \"Work From Home\"]]\n    },\n    fields: [\"employee_name\", \"attendance_date\", \"status\"],\n    order_by: \"attendance_date asc\",\n    limit_page_length: 100\n  },\n  callback: function (r) {\n    const container = root_element.querySelector(\"#attendance_wrapper\");\n    if (r.message && r.message.length > 0) {\n      const today = new Date(frappe.datetime.get_today());\n      const upcomingRecords = r.message.filter(entry => {\n        const entryDate = new Date(entry.attendance_date);\n        const diffDays = (entryDate - today) / (1000 * 60 * 60 * 24);\n        return diffDays >= 0 && diffDays <= 30;\n      });\n\n      if (upcomingRecords.length === 0) {\n        container.innerHTML = \"<div class='card-message'>No upcoming On Leave or Work From Home records in next 30 days.</div>\";\n        return;\n      }\n\n      const grouped = groupConsecutiveAttendance(upcomingRecords);\n      renderAttendanceCards(grouped);\n    } else {\n      container.innerHTML = \"<div class='card-message'>No Upcoming Leaves or Work From Home records.</div>\";\n    }\n  }\n});\n\nfunction groupConsecutiveAttendance(records) {\n  const grouped = {};\n  records.forEach(r => {\n    const key = r.employee_name + \"::\" + r.status;\n    if (!grouped[key]) grouped[key] = [];\n    grouped[key].push(r.attendance_date);\n  });\n\n  const result = [];\n  Object.keys(grouped).forEach(key => {\n    const [employee, status] = key.split(\"::\");\n    const dates = grouped[key].sort();\n\n    let start = dates[0];\n    let end = dates[0];\n\n    const pushRange = () => {\n      result.push({ employee, status, from: start, to: end });\n    };\n\n    for (let i = 1; i < dates.length; i++) {\n      const prev = new Date(end);\n      prev.setDate(prev.getDate() + 1);\n      const current = new Date(dates[i]);\n\n      if (prev.toISOString().slice(0, 10) === dates[i]) {\n        end = dates[i];\n      } else {\n        pushRange();\n        start = end = dates[i];\n      }\n    }\n    pushRange();\n  });\n\n  return result;\n}\n\nfunction renderAttendanceCards(data) {\n  const container = root_element.querySelector(\"#attendance_wrapper\");\n  container.innerHTML = \"\";\n  const badgeClasses = { \"On Leave\": \"badge-leave\", \"Work From Home\": \"badge-wfh\" };\n\n  data.forEach(row => {\n    const formatDate = (dateStr) => {\n      const d = new Date(dateStr);\n      const dd = String(d.getDate()).padStart(2, '0');\n      const mm = String(d.getMonth() + 1).padStart(2, '0');\n      const yy = String(d.getFullYear()).slice(-2);\n      return `${dd}-${mm}-${yy}`;\n    };\n\n    const dateText = (row.from === row.to)\n      ? formatDate(row.from)\n      : `${formatDate(row.from)} to ${formatDate(row.to)}`;\n\n    const card = document.createElement(\"div\");\n    card.className = \"card attendance-card\";\n\n    card.innerHTML = `\n      <div class=\"card-body single-line\">\n        <span class=\"employee-name\">${row.employee}</span>\n        <span class=\"date-range\">${dateText}</span>\n        <span class=\"attendance-status\"><span class=\"badge ${badgeClasses[row.status]}\">${row.status}</span></span>\n      </div>\n    `;\n\n    container.appendChild(card);\n  });\n}\n\nfrappe.call({\n  method: \"intranet.intranet.api.dashboard.get_public_tasks\",\n  args: {\n    doctype: \"Task\",\n    filters: {\n      status: ['In', [\"Open\", \"Overdue\", \"Pending Review\", \"Working\"]]\n    },\n    fields: [\"name\", \"subject\", \"status\", \"project\", \"priority\"],\n  },\n  callback: function (response) {\n    if (response.message) {\n      renderTaskCards(response.message);\n    } else {\n      console.error(\"No task list data found.\");\n    }\n  },\n  error: function (xhr, status, error) {\n    console.error(\"Error fetching task list:\", error);\n  },\n});\n\nfunction renderTaskCards(tasks) {\n  const container = root_element.querySelector(\"#task_wrapper\");\n  container.innerHTML = \"\";\n  tasks.forEach(task => {\n    const statusColor = task.status === \"Overdue\" ? \"red\" : \"green\";\n\n    let priorityColor = \"\";\n    switch (task.priority) {\n      case \"Urgent\": priorityColor = \"red\"; break;\n      case \"High\": priorityColor = \"orange\"; break;\n      case \"Medium\": priorityColor = \"#8B8000\"; break;\n      case \"Low\": priorityColor = \"green\"; break;\n      default: priorityColor = \"inherit\";\n    }\n\n    const card = document.createElement(\"div\");\n    card.className = \"card task-card\";\n\n   card.innerHTML = `\n  <div class=\"card-body single-line\" style=\"gap: 12px; white-space: nowrap;\">\n    <a href=\"/app/task/${task.name}\" title=\"${task.subject}\" style=\"font-weight: 600; color: #333;\">${task.name}</a>\n    <a href=\"/app/project/${task.project}\" style=\"color: #0070cc;\">${task.project}</a>\n  </div>\n  <div class=\"card-body single-line\" style=\"gap: 12px; margin-top: px;\">\n    <span><strong>Status:</strong> <span style=\"color:${statusColor};\">${task.status}</span></span>\n    <span><strong>Priority:</strong> <span style=\"color:${priorityColor};\">${task.priority}</span></span>\n  </div>\n`;\n\n    container.appendChild(card);\n  });\n}\n\n\n\n\n    \n    const today = frappe.datetime.get_today();\n\nfrappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n        doctype: 'Internal Updates',\n        fields: ['type', 'content', 'display_date', 'person_name', 'is_active'],\n        filters: {\n            display_date: today,\n            docstatus: 1,       // Only submitted\n            is_active: 1        // Only active\n        },\n        order_by: 'display_date desc',\n        limit: 20\n    },\n    callback: function (res) {\n        let todayData = res.message || [];\n\n        // Fetch most recent past entries if today's data is not available for some type\n        function getLatestDataForType(type) {\n            // filter today's entries of given type and active + submitted (already filtered)\n            const todays = todayData.filter(item => item.type === type && item.is_active);\n\n            if (todays.length > 0) {\n                // Return today's entries if any (all active + submitted already)\n                return Promise.resolve(todays);\n            }\n\n            // For announcements, if there are no today's, get most recent past entries\n            return new Promise(resolve => {\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Internal Updates',\n                        fields: ['type', 'content', 'display_date', 'person_name', 'is_active'],\n                        filters: {\n                            type: type,\n                            docstatus: 1,      // only submitted\n                            is_active: 1       // only active\n                        },\n                        order_by: 'display_date desc',\n                        limit: 10\n                    },\n                    callback: function (pastRes) {\n                        const past = pastRes.message || [];\n                        if (past.length === 0) return resolve([]);\n\n                        // Get only the most recent past date's entries (all active and submitted)\n                        const latestDate = past[0].display_date;\n                        const latestEntries = past.filter(item => item.display_date === latestDate);\n                        resolve(latestEntries);\n                    }\n                });\n            });\n        }\n\n        function fadeContent(container, newHtml) {\n            container.classList.remove('fade-in');\n            container.classList.add('fade-out');\n\n            setTimeout(() => {\n                container.innerHTML = newHtml;\n                container.classList.remove('fade-out');\n                container.classList.add('fade-in');\n            }, 400);\n        }\n\n        function rotateEntries(type, selector) {\n            getLatestDataForType(type).then(entries => {\n                const container = root_element.querySelector(selector);\n                if (!entries || entries.length === 0) {\n                    container.innerHTML = `No ${type.toLowerCase()}.`;\n                    return;\n                }\n\n                const items = entries.map(update => `\n                    <div class=\"main-content\">${update.content}</div>\n                    ${update.person_name ? `<div class=\"person-name\">- ${update.person_name}</div>` : ''}\n                `);\n\n                let index = 0;\n                container.innerHTML = items[index];\n                container.classList.add('fade-in');\n\n                if (items.length > 1) {\n                    setInterval(() => {\n                        index = (index + 1) % items.length;\n                        fadeContent(container, items[index]);\n                    }, 5000);  // rotate every 5 seconds per your request\n                }\n            });\n        }\n\n        // Run sections\n        rotateEntries('Quote of the Day', '.quote-content');\n        rotateEntries('Testimonials', '.testimonial-content');\n        rotateEntries('Announcements', '.announcement-content');\n    }\n});\n\n\n\n\nconst now = new Date();\nconst currentYear = now.getFullYear();\nconst currentMonth = now.getMonth();  // 0-based\n\nconst startDate = new Date(currentYear, currentMonth - 1, 1); // 1st day of last month\nconst endDate = now;                        // today (current date)\n\nfunction formatDate(date) {\n  return date.toISOString().slice(0, 10);\n}\n\nfrappe.call({\n  method: \"frappe.client.get_count\",\n  args: {\n    doctype: \"Employee\",\n    filters: {\n      status: \"Active\"\n    }\n  },\n  callback: function (r) {\n    const totalActive = r.message || 0;\n\n    frappe.call({\n      method: \"frappe.client.get_count\",\n      args: {\n        doctype: \"Employee\",\n        filters: [\n          [\"status\", \"=\", \"Active\"],\n          [\"date_of_joining\", \">=\", formatDate(startDate)],\n          [\"date_of_joining\", \"<=\", formatDate(endDate)]\n        ]\n      },\n      callback: function (res) {\n        const joinedSinceStart = res.message || 0;\n        const percentage = totalActive > 0\n          ? ((joinedSinceStart / totalActive) * 100).toFixed(2)\n          : \"0\";\n\n        const countElement = root_element.querySelector(\"#employee-count\");\n        const joinPctElement = root_element.querySelector(\"#employee-join-percentage\");\n\n        countElement.textContent = `${totalActive} Employees`;\n        joinPctElement.textContent = `${percentage}% joined since ${formatDate(startDate)}`;\n      }\n    });\n  }\n});\n\nconst makeCard = (emp, extraLines = [], cardClass = '') => `\n    <div class=\"employee-card ${cardClass}\" id=\"card-${emp.name}\">\n        <img src=\"${emp.image || '/assets/frappe/images/ui/avatar.png'}\" />\n        <div class=\"employee-details\">\n            <strong>\n                ${emp.employee_name}\n                ${emp.isToday ? ' üéä' : ''}\n            </strong>\n            ${extraLines.map(line => `<div>${line}</div>`).join('')}\n        </div>\n    </div>`;\n\n// Helper to get the first 3 letters of the month abbreviation\nfunction getMonthFirst3Letters(date) {\n    let shortMonth = new Date(date).toLocaleString('en-IN', { month: 'short' });\n    return shortMonth.substring(0, 3);\n}\n\n// Updated formatDate to use exact 3-letter month abbreviation\nfunction formatDate(date) {\n    const d = new Date(date);\n    const day = d.getDate();\n    const month = getMonthFirst3Letters(d);\n    const year = d.getFullYear();\n    return `${day} ${month} ${year}`;\n}\n\n// For birthday calculations\nfunction getBirthdayInfo(dob) {\n    const now = new Date();\n    const bday = new Date(dob);\n    bday.setFullYear(now.getFullYear());\n    const isToday = bday.getDate() === now.getDate() && bday.getMonth() === now.getMonth();\n    if (bday < now && !isToday) bday.setFullYear(now.getFullYear() + 1);\n    return {\n        isToday,\n        upcomingDate: bday,\n        daysLeft: Math.floor((bday - now) / (1000 * 60 * 60 * 24))\n    };\n}\n\nfunction getAnniversaryInfo(doj) {\n    const now = new Date();\n    const anniversary = new Date(now.getFullYear(), doj.getMonth(), doj.getDate());\n    const isToday = anniversary.getDate() === now.getDate() && anniversary.getMonth() === now.getMonth();\n    const daysToAnniversary = Math.floor((anniversary - now) / (1000 * 60 * 60 * 24));\n    const years = now.getFullYear() - doj.getFullYear();\n    return {\n        isToday,\n        anniversary,\n        daysToAnniversary,\n        years\n    };\n}\n\nfunction getJoinerInfo(doj) {\n    const now = new Date();\n    const isToday = doj.getDate() === now.getDate() && doj.getMonth() === now.getMonth() && doj.getFullYear() === now.getFullYear();\n    return {\n        isToday,\n        doj\n    };\n}\n\nfunction getOrdinal(n) {\n    const suffixes = [\"th\", \"st\", \"nd\", \"rd\"];\n    const v = n % 100;\n    return n + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]);\n}\n\nfrappe.call({\n    method: 'intranet.intranet.api.dashboard.get_all_employee_details',\n    args: {\n        doctype: 'Employee',\n        fields: [\n            'name',\n            'employee_name',\n            'image',\n            'date_of_birth',\n            'date_of_joining',\n            'designation',\n            'company',\n            'status'\n        ],\n        limit: 100\n    },\n    callback: function(res) {\n        if (!res.message) return;\n        const now = new Date();\n        const birthdayList = [];\n        const anniversaryList = [];\n        const joinerList = [];\n        res.message.forEach(emp => {\n            if (emp.status !== 'Active') return;\n            const dob = emp.date_of_birth ? new Date(emp.date_of_birth) : null;\n            const doj = emp.date_of_joining ? new Date(emp.date_of_joining) : null;\n            //  Birthdays in next 60 days\n            if (dob) {\n                const bInfo = getBirthdayInfo(dob);\n                if (bInfo.daysLeft <= 60 || bInfo.isToday) {\n                    birthdayList.push({ ...emp, ...bInfo });\n                }\n            }\n            // üéâ Work anniversaries in next 60 days (1st anniversary onwards)\n            if (doj) {\n                const aInfo = getAnniversaryInfo(doj);\n                if (aInfo.years >= 1 && ((aInfo.daysToAnniversary >= 0 && aInfo.daysToAnniversary <= 60) || aInfo.isToday)) {\n                    anniversaryList.push({ \n                        ...emp, ...aInfo, type: 'anniversary' \n                    });\n                }\n            }\n            // üëã New joiners in last 30 days\n            if (doj) {\n                const jInfo = getJoinerInfo(doj);\n                if ((now - doj) / (1000 * 60 * 60 * 24) <= 30 || jInfo.isToday) {\n                    joinerList.push({ \n                        ...emp, ...jInfo, type: 'joiner' \n                    });\n                }\n            }\n        });\n        /* ---- SECTION 1: Upcoming Birthdays ---- */\n        birthdayList.sort((a, b) => {\n            if (a.isToday && !b.isToday) return -1;\n            if (!a.isToday && b.isToday) return 1;\n            return a.daysLeft - b.daysLeft;\n        });\n        \n        // Select the dashboard-box containing Upcoming Birthdays\n        const birthdayBox = Array.from(root_element.querySelectorAll('.dashboard-box'))\n            .find(box => box.querySelector('h2') && \n                box.querySelector('h2').textContent.trim().includes('Upcoming Birthdays'));\n        const birthdayContainer = birthdayBox ? birthdayBox.querySelector('.birthday-list') : null;\n        const birthdayHeading = birthdayBox ? birthdayBox.querySelector('h2') : null;\n        // Safely update content if found\n        if (birthdayHeading && birthdayContainer) {\n            if (birthdayList.length === 0) {\n                birthdayContainer.innerHTML = `<p class=\"center-message\">No upcoming birthdays.</p>`;\n                birthdayHeading.innerText = '0 Upcoming Birthdays';\n            } else {\n                birthdayHeading.innerText = `${birthdayList.length} Upcoming Birthdays`;\n                birthdayContainer.innerHTML = birthdayList.map(emp => \n                    makeCard(emp, [`üéÇ  ${formatDate(emp.upcomingDate)}`], emp.isToday ? 'birthday-today' : 'birthday-card')\n                ).join('');\n            }\n        }\n        /* ---- SECTION 2: Work Anniversaries / New Joiners ---- */\n        const combinedList = [...anniversaryList, ...joinerList];\n        combinedList.sort((a, b) => {\n            const dateA = a.type === 'anniversary' ? a.anniversary : a.doj;\n            const dateB = b.type === 'anniversary' ? b.anniversary : b.doj;\n            const diffA = Math.abs(dateA - now);\n            const diffB = Math.abs(dateB - now);\n            return diffA - diffB;\n        });\n        const combinedContainer = root_element.querySelector('.combined-list');\n        const combinedHeading = combinedContainer.parentElement.querySelector('h2');\n        // Build new heading text for anniversaries/joiners with correct pluralization\n        let annivCount = anniversaryList.length;\n        let joinerCount = joinerList.length;\n        let headingTextArr = [];\n        if (annivCount === 1) {\n            headingTextArr.push('1 Work Anniversary');\n        } else if (annivCount > 1) {\n            headingTextArr.push(`${annivCount} Work Anniversaries`);\n        }\n        if (joinerCount === 1) {\n            headingTextArr.push('1 New Joiner');\n        } else if (joinerCount > 1) {\n            headingTextArr.push(`${joinerCount} New Joiners`);\n        }\n        let combinedHeadingText = headingTextArr.length > 0 ? headingTextArr.join(' / ') : 'Work Anniversaries / New Joiners';\n        combinedHeading.innerText = combinedHeadingText;\n        if (combinedList.length === 0) {\n            combinedContainer.innerHTML = `<p class=\"center-message\">No upcoming anniversaries or recent joiners.</p>`;\n        } else {\n            combinedContainer.innerHTML = combinedList.map(emp => {\n                if (emp.type === 'anniversary') {\n                    return makeCard(emp, [\n                        `üéâ ${getOrdinal(emp.years)} Anniversary on ${formatDate(emp.anniversary)}`\n                    ], emp.isToday ? 'anniversary-today' : 'anniversary-card');\n                } else {\n                    return makeCard(emp, [\n                        `üëã Joined: ${formatDate(emp.doj)}`\n                    ], emp.isToday ? 'joiner-today' : 'joiner-card');\n                }\n            }).join('');\n        }\n    }\n});\n\n\n\n\n\n    \n\n\n// üìÖ Get date range for last 30 days (including today)\nfunction getDateRangeLast30Days() {\n    const now = new Date();\n    const start = new Date();\n    start.setDate(now.getDate() - 30);\n    return {\n        start: frappe.datetime.obj_to_str(start),\n        end: frappe.datetime.obj_to_str(now)\n    };\n}\n\n// Updated loadLeaderboardPoints to use last 30 days range\nfunction loadLeaderboardPoints() {\n    const { start, end } = getDateRangeLast30Days();\n    frappe.call({\n        method: 'intranet.intranet.api.dashboard.get_energy_point_logs',\n        args: { start_date: start, end_date: end },\n        callback: function (res) {\n            const logs = res.message || [];\n            const userPoints = {};\n            // Aggregate points per user\n            logs.forEach(log => {\n                if (!log.user) return;\n                userPoints[log.user] = (userPoints[log.user] || 0) + Number(log.points);\n            });\n            const users = Object.keys(userPoints);\n            if (users.length === 0) {\n                renderLeaderboard({}, {});\n                return;\n            }\n            // Fetch Employee Details with `user_id` first\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Employee',\n                    filters: { user_id: ['in', users] },\n                    fields: ['user_id', 'employee_name'],\n                    limit_page_length: 1000\n                },\n                callback: function (empRes) {\n                    let empMap = {};\n                    (empRes.message || []).forEach(emp => {\n                        empMap[emp.user_id] = emp.employee_name;\n                    });\n                    if (Object.keys(empMap).length === 0) {\n                        // Try with 'user' field if user_id is not matching\n                        frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Employee',\n                                filters: { user: ['in', users] },\n                                fields: ['user', 'employee_name'],\n                                limit_page_length: 1000\n                            },\n                            callback: function (empRes2) {\n                                (empRes2.message || []).forEach(emp => {\n                                    empMap[emp.user] = emp.employee_name;\n                                });\n                                renderLeaderboard(userPoints, empMap);\n                            }\n                        });\n                    } else {\n                        renderLeaderboard(userPoints, empMap);\n                    }\n                }\n            });\n        }\n    });\n}\n\n\n// üé® Render Top 3 Leaderboard\n\nfunction renderLeaderboard(userPoints, empMap) {\n    const container = root_element.querySelector('.points-list');\n    container.innerHTML = ''; // Clear previous content\n\n    if (!userPoints || Object.keys(userPoints).length === 0) {\n        const noData = document.createElement('p');\n        noData.style.textAlign = 'center';\n        noData.innerText = 'No points found.';\n        container.appendChild(noData);\n        return;\n    }\n\n    // Sort all users by points descending\n    const ranked = Object.entries(userPoints)\n        .map(([user, points]) => ({\n            employee_name: empMap[user] || formatFallbackName(user),\n            points\n        }))\n        .sort((a, b) => b.points - a.points);\n\n    const medals = ['ü•á', 'ü•à', 'ü•â'];\n\n    // Create containers for top 3 and others\n    const top3Container = document.createElement('div');\n    top3Container.className = 'top3-container';\n\n    const othersContainer = document.createElement('div');\n    othersContainer.className = 'others-points-container';\n\n    // Render top 3 with medals and glow effect + 5px gap between\n    ranked.slice(0, 3).forEach((entry, i) => {\n        const div = document.createElement('div');\n        div.className = 'points-card glow';\n        div.innerHTML = `\n            <span class=\"medal\">${medals[i]}</span>\n            <div class=\"info\">\n                <div class=\"name\">${entry.employee_name}      ${entry.points} points</div>\n            </div>\n            \n        `;\n        top3Container.appendChild(div);\n    });\n\n // Render others normally with indented name\nranked.slice(3).forEach(entry => {\n    const div = document.createElement('div');\n    div.className = 'points-card';\n\n    div.innerHTML = `\n        <div class=\"info\">\n            <div class=\"name indented-name\">${entry.employee_name} ${entry.points} points</div>\n        </div>\n    `;\n    othersContainer.appendChild(div);\n});\n\n\n\n    container.appendChild(top3Container);\n    container.appendChild(othersContainer);\n    \n}\n\n\n// üë§ Format name from email if no employee name exists\nfunction formatFallbackName(userId) {\n    if (!userId) return 'Unknown';\n    const namePart = userId.split('@')[0] || userId;\n    return namePart\n        .split(/[._]/)\n        .map(w => w.charAt(0).toUpperCase() + w.slice(1))\n        .join(' ');\n}\n\n// üìå Load leaderboard on page ready\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    loadLeaderboardPoints();\n});\n\nfunction loadEvents() {\n  const today = new Date();\n  const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);\n  const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n  const start = frappe.datetime.obj_to_str(monthStart);\n  const end = frappe.datetime.obj_to_str(monthEnd);\n  const monthName = today.toLocaleString('en-IN', { month: 'long' });\n  const subtitleContainer = root_element.querySelector('.event-box h2.section-title');\n  if (subtitleContainer) {\n    subtitleContainer.innerText = ` ${monthName} Events and Holidays`;\n  }\n  frappe.call({\n    method: 'intranet.intranet.api.dashboard.get_employee_events',\n    args: { start: start, end: end },\n    callback: function (res) {\n      const openEvents = (res.message || []).filter(evt => evt.status === 'Open');\n      getHolidays(start, end).then(holidays => {\n        const combinedList = [];\n        openEvents.forEach(evt => {\n          const dt = frappe.datetime.str_to_obj(evt.starts_on);\n          combinedList.push({\n            dateStr: frappe.datetime.obj_to_user(dt).split(' ')[0],\n            dateObj: dt,\n            timeStr: dt.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' }),\n            subject: evt.subject,\n            type: 'event'\n          });\n        });\n        holidays.forEach(holiday => {\n          const hDate = new Date(holiday.holiday_date);\n          combinedList.push({\n            dateStr: frappe.datetime.obj_to_user(hDate).split(' ')[0],\n            dateObj: hDate,\n            timeStr: '', // no time for holiday\n            subject: holiday.description || 'Holiday',\n            type: 'holiday'\n          });\n        });\n        const todayStr = frappe.datetime.obj_to_user(today).split(' ');\n        combinedList.sort((a, b) => {\n          const aIsToday = a.dateStr === todayStr;\n          const bIsToday = b.dateStr === todayStr;\n          // Place today first\n          if (aIsToday && !bIsToday) return -1;\n          if (!aIsToday && bIsToday) return 1;\n          // Place future dates next (greater than today)\n          if (a.dateObj > today && b.dateObj <= today) return -1;\n          if (b.dateObj > today && a.dateObj <= today) return 1;\n          // Past dates last (ascending order among past dates)\n          if (a.dateObj < today && b.dateObj < today) {\n            return a.dateObj - b.dateObj;\n          }\n          // Among future dates or both today, sort ascending by date\n          return a.dateObj - b.dateObj;\n        });\n        const container = root_element.querySelector('.event-list');\n        if (combinedList.length === 0) {\n          container.innerHTML = '<p class=\"center-message\">No events or holidays found for this month.</p>';\n        } else {\n          container.innerHTML = combinedList.map(item => {\n            return `\n  <div class=\"event-card ${item.type === 'holiday' ? 'holiday-card' : ''}\">\n    <div class=\"event-tag ${item.type === 'holiday' ? 'tag-holiday' : 'tag-event'}\" style=\"color:black; display: inline-block; margin-right: 8px;\">\n      ${item.type === 'holiday' ? 'Holiday' : 'Event'}\n    </div>\n    <div class=\"event-date\" style=\"display: inline-block;\">\n      <strong>${item.dateStr}</strong>\n      ${item.timeStr ? `<span class=\"event-time\">${item.timeStr}</span>` : ''}\n    </div>\n    <div class=\"event-subject\">${item.type === 'holiday' ? 'üéâ' : 'üìå'} ${item.subject}</div>\n  </div>\n`;\n          }).join('');\n        }\n      });\n    }\n  });\n}\n\n\nfunction getHolidays(start, end) {\n  return new Promise((resolve) => {\n    frappe.call({\n      method: 'intranet.intranet.api.dashboard.get_employee_holidays',\n      args: { start: start, end: end },\n      callback: function (res) {\n        resolve(res.message || []);\n      }\n    });\n  });\n}\n\n\n\n\n// Initialize event list (no filters needed)\nloadEvents();\n\n// Run only this, no filters needed\nloadEvents();\n\n\n// Remove filter buttons click listeners and hide buttons container\nroot_element.querySelectorAll('.filter-btn').forEach(btn => btn.remove());\nconst filterButtonsContainer = root_element.querySelector('.events-filter-buttons');\nif (filterButtonsContainer) filterButtonsContainer.style.display = 'none';\n\n// üîÉ Initial load of leaderboard and events without filters\nloadLeaderboardPoints('week');  // keep leaderboard separate if needed\nloadEvents(); // loads open events for current month, no filter needed\n\n\n\n\n\n\n\nfrappe.call({\n  method: \"intranet.intranet.api.dashboard.get_open_jobs_basic\",\n  args: { limit: 10 },\n  callback: function (r) {\n    const container = root_element.querySelector(\"#job_openings_list\");\n    const titleEl = root_element.querySelector(\"#job_openings_title\");\n    if (!r.message) return;\n    const { count, jobs } = r.message;\n    if (count > 0) {\n      titleEl.innerHTML = `${count} Job Opening${count > 1 ? 's' : ''}`;\n      container.innerHTML = jobs.map(job => {\n        if (job.route) {\n          // clickable link if route exists\n          return `\n            <div class=\"job-card\">\n              <a href=\"${job.route}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-primary job-link\">\n                ${job.info}\n              </a>\n            </div>\n          `;\n        } else {\n          // plain text if no route (not published)\n          return `\n            <div class=\"job-card text-muted\">\n              ${job.info}\n            </div>\n          `;\n        }\n      }).join('');\n    } else {\n      titleEl.innerHTML = \"0 Job Openings\";\n      container.innerHTML = `<div class=\"text-muted text-center py-3\">There is no Job Opening</div>`;\n    }\n  }\n});\n",
  "style": "    \n.indented-name {\n  margin-left: 45px; /* indent only the name */\n}\n\n.top3-container {\n  display: flex;\n  flex-direction: column;\n}\n\n.top3-container .points-card:not(:last-child) {\n  margin-bottom: 10px; /* gap between top 3 cards */\n}\n\n/* Container for all points cards stacked vertically */\n.points-list {\n  display: flex;\n  flex-direction: column;\n  gap: 12px; /* gap between all cards container */\n}\n\n/* For other points cards: consistent vertical spacing */\n.others-points-container .points-card:not(:last-child) {\n  margin-bottom: 10px;\n}\n\n/* Points cards styling */\n.points-card {\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  padding: 8px 12px;\n  background-color: #f9f9f9;\n  border-radius: 12px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  line-height: 1.2;\n  max-height: 50px;\n  overflow: hidden;\n  margin: 0 15px; /* horizontal spacing between cards */\n}\n\n/* Medal placeholder */\n.points-card .medal {\n  min-width: 28px; /* reserve width similar to medal font size */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  margin-top: 0; /* align vertically */\n}\n\n/* Cards without medals reserve space */\n.points-card.no-medal .medal {\n  content: '';\n  font-size: 0;    /* hide text */\n  min-width: 28px; /* reserve space */\n}\n\n/* Name inside card */\n.name {\n  flex: 1;               /* fill available space */\n  text-align: center;    /* center horizontally */\n  white-space: nowrap;   /* prevent line break */\n  font-weight: 600;\n  font-size: 16px;\n  color: #333;\n}\n\n/* Medal icon styling */\n.medal {\n  font-size: 24px;\n  margin-top: 4px;\n}\n\n/* Info container inside card */\n.info {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n/* Points text (not used in current HTML but prepared) */\n.points {\n  font-size: 14px;\n  color: #666;\n  margin-top: 2px;\n}\n\n/* Trophy animation */\n.trophy {\n  display: inline-block;\n  animation: trophy-pulse 1.2s infinite ease-in-out;\n}\n\n/* Buttons container styling */\n.points-filter-buttons,\n.events-filter-buttons {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n/* Filter button styling */\n.filter-btn {\n  background-color: #f0f0f0;\n  border: none;\n  padding: 6px 12px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  color: #2f2f2f;\n  transition: transform 0.1s ease, background-color 0.2s ease;\n}\n\n.filter-btn.active {\n  background-color: #343a40;\n  color: white;\n}\n\n.filter-btn:active {\n  transform: scale(0.92);\n}\n\n.dashboard-box h4 {\n  text-align: center;\n  margin-bottom: 12px;\n}\n\n.attendance-wrapper,\n.task-wrapper {\n  min-height: 300px;\n  max-height: 300px;\n  overflow-y: auto;\n  padding: 2px;\n  background-color: #fff;\n    border: none; /* remove border */\n\n}\n\n\n\n\n/* Card styles */\n.card {\n\n  background: #f9f9f9;\n  padding: 2px 2px;\n  margin-bottom: 10px;\n  /*box-shadow: 0 1px 3px rgba(0,0,0,0.1);*/\n  font-size: 13px;\n    border: none; /* remove border */\n\n}\n\n.card-header {\n  font-weight: 600;\n  margin-bottom: 6px;\n  color: #333;\n  font-size: 14px;\n}\n\n\n.card-task-subject {\n  margin-bottom: px;\n  font-weight: 500;\n}\n\n.card-date-range {\n  margin-bottom: 4px;\n}\n\n.card-status {\n  margin-top: 4px;\n}\n\n/* Badge styles */\n.badge {\n  display: inline-block;\n  padding: 2px 8px;\n  font-size: 12px;\n  font-weight: 500;\n  border-radius: 10px;\n  text-transform: capitalize;\n}\n\n.badge-leave {\n  background-color: #f8d0c1;\n  color: #bd3e0c;\n}\n\n.badge-wfh {\n  background-color: #cce7f8;\n  color: #0070cc;\n}\n\n/* Scrollbar styling */\n.attendance-wrapper::-webkit-scrollbar,\n.task-wrapper::-webkit-scrollbar {\n  width: 5px;\n}\n\n.attendance-wrapper::-webkit-scrollbar-thumb,\n.task-wrapper::-webkit-scrollbar-thumb {\n  background: #ccc;\n  border-radius: 5px;\n}\n\n/* Message for empty */\n.card-message {\n  padding: 10px;\n  font-style: italic;\n  color: #999;\n}\n\n.single-line {\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  font-size: 13px;\n  color: #555;\n  flex-wrap: wrap; /* Allows wrap on smaller screens */\n}\n\n.single-line span {\n  /* Keep text blocks nicely separated with smallest possible margin */\n  white-space: nowrap;\n}\n\n.employee-name {\n  font-weight: 600;\n  color: #333;\n}\n\n.date-range {\n  color: #666;\n}\n\n.attendance-status .badge {\n  vertical-align: middle;\n}\n\n.attendance-wrapper,\n.task-wrapper {\n  max-height: 180px;\n  overflow-y: scroll; /* keep scrollable */\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n.attendance-wrapper::-webkit-scrollbar,\n.task-wrapper::-webkit-scrollbar {\n  display: none; /* Safari and Chrome */\n}\n    /* Smaller card padding and font size */\n.card.task-card {\n  font-size: 12px;   /* slightly smaller font for whole card */\n  margin-bottom: 2px;\n    border: none; /* remove border */\n\n}\n\n/* Smaller task ID font size */\n.card-header a {\n  font-size: 12px;\n  font-weight: 600;\n  text-decoration: none;\n  color: #333;\n}\n\n/* Show task ID and project on the same line */\n.card-body.single-line {\n  display: flex;\n  gap: 1px;\n  align-items: center;\n  flex-wrap: nowrap;  /* prevent wrapping onto new lines */\n  font-size: 12px;\n  color: #555;\n}\n\n/* Style for project link to better align with task ID */\n.card-body.single-line a {\n  font-weight: 500;\n  color: #007bff;\n  white-space: nowrap;\n}\n.task-card {\n \n  margin-bottom: 200px; /* increased gap between cards */\n  font-size: 12px;\n}\n\n\n    \n    /* Table Wrappers */\n    /*.attendance-wrapper,*/\n    /*.task-wrapper {*/\n    /*  max-height: 180px;*/\n    /*  overflow-y: auto;*/\n    /*  border: 1px solid #e0e0e0;*/\n    /*  border-radius: 6px;*/\n    /*}*/\n    \n    /* Common Table Styles */\n    /*#attendance_table,*/\n    /*#task_table {*/\n    /*  width: 100%;*/\n    /*  border-collapse: collapse;*/\n    /*  font-size: 13px;*/\n    /*}*/\n    \n    /*#attendance_table thead,*/\n    /*#task_table thead {*/\n    /*  background-color: #f8f8f8;*/\n    /*  font-weight: 600;*/\n    /*}*/\n    \n    /*#attendance_table th,*/\n    /*#attendance_table td,*/\n    /*#task_table th,*/\n    /*#task_table td {*/\n    /*  padding: 6px 10px;*/\n    /*  border-bottom: 1px solid #eee;*/\n    /*}*/\n    \n    /* Attendance Status Colors */\n    /*#attendance_table td.status-leave {*/\n    /*  color: #d9534f;*/\n    /*  font-weight: bold;*/\n    /*}*/\n    \n    /*#attendance_table td.status-wfh {*/\n    /*  color: #0275d8;*/\n    /*  font-weight: bold;*/\n    /*}*/\n    \n    /* Scrollbar Styling */\n    /*.attendance-wrapper::-webkit-scrollbar,*/\n    /*.task-wrapper::-webkit-scrollbar {*/\n    /*  width: 5px;*/\n    /*}*/\n    /*.attendance-wrapper::-webkit-scrollbar-thumb,*/\n    /*.task-wrapper::-webkit-scrollbar-thumb {*/\n    /*  background: #ccc;*/\n    /*  border-radius: 5px;*/\n    /*}*/\n    \n    /* Badges */\n    /*.badge {*/\n    /*  display: inline-block;*/\n    /*  padding: 2px 8px;*/\n    /*  font-size: 12px;*/\n    /*  font-weight: 500;*/\n    /*  border-radius: 10px;*/\n    /*  text-transform: capitalize;*/\n    /*}*/\n    \n    /*.badge-leave {*/\n    /*  background-color: #f8d0c1;*/\n    /*  color: #bd3e0c;*/\n    /*}*/\n    \n    /*.badge-wfh {*/\n    /*  background-color: #cce7f8;*/\n    /*  color: #0070cc;*/\n    /*}*/\n    \n    \n    .header-section {\n      height: 170px; /* or any height you prefer */\n      overflow: hidden;\n      margin-bottom: 20px;\n    }\n    \n    .info-row-4 {\n      display: flex;\n      gap: 12px;\n      height: 100%;\n    }\n    \n    .info-box {\n      flex: 1;\n      background: #f9f9f9;\n      border-radius: 10px;\n      padding: 14px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.04);\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      height: 100%;\n      overflow: hidden;\n    }\n    \n    .info-box h3 {\n      font-size: 16px;\n      margin-bottom: 6px;\n    }\n    \n    \n    \n    /* 4-column row layout */\n    .info-row-4 {\n        display: flex;\n        gap: 12px;\n        justify-content: space-between;\n        padding: 10px;\n        margin-bottom: 16px;\n        flex-wrap: nowrap;\n        align-items: stretch;\n    }\n    \n    /* Card-style box */\n    .info-box {\n        background: #fff;\n        border: 1px solid #e3e6eb;\n        border-radius: 8px;\n        padding: 16px;\n        box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n        transition: all 0.3s ease;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        font-family: \"Inter\", sans-serif;\n    }\n    \n    \n    \n    /* Fade Animations */\n    /* Fade Animations */\n    .quote-content,\n    .testimonial-content,\n    .announcement-content,\n    .faq-content {\n      opacity: 1;\n      transition: opacity 0.4s ease;\n      min-height: 40px;\n    }\n    \n    .fade-out {\n      opacity: 0;\n      transition: opacity 0.4s ease-out;\n    }\n    \n    .fade-in {\n      opacity: 1;\n      transition: opacity 0.4s ease-in;\n    }\n    \n    \n    .info-box {\n      display: block; /* or flex with justify-content: flex-start */\n      height: auto;   /* avoid fixed heights unless required */\n    }\n    \n    \n    .faq-box {\n      display: none !important;\n    }\n    \n    \n    .person-name {\n        margin-top: 6px; /* reduced margin */\n        font-style: italic;\n        font-size: 0.85em; /* slightly smaller font */\n        color: #555;\n    }\n    \n    \n    /* Main grid container: 3 columns */\n    .dashboard-grid-rows {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 20px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    \n    /* First 3 boxes in first row */\n    .dashboard-grid-rows > .dashboard-box:nth-child(-n+3) {\n      grid-row: 1;\n    }\n    \n    /* Next 3 boxes in second row */\n    .dashboard-grid-rows > .dashboard-box:nth-child(n+4):nth-child(-n+6) {\n      grid-row: 2;\n    }\n    \n    /* Common dashboard box styling */\n    .dashboard-grid-rows > .dashboard-box {\n      background: #fff;\n      padding: 10px;\n      border-radius: 14px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n      display: flex;\n      flex-direction: column;\n      max-height: 370px;\n      overflow-y: auto;\n      box-sizing: border-box;\n    }\n    \n    /* Employee Directory card: half width */\n    .employee-directory-card,\n    #employee-directory-box {\n      grid-column: span 1.5;\n      cursor: pointer;\n      /* Add consistent styling if employee-directory-card used standalone */\n      background: #fff;\n      padding: 10px;\n      border-radius: 14px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n      display: flex;\n      flex-direction: column;\n      max-height: 370px;\n      overflow-y: auto;\n      box-sizing: border-box;\n    }\n    \n    /* Other cards on second row take remaining space */\n    .dashboard-grid-rows > .dashboard-box:nth-child(n+4):not(.employee-directory-card):not(#employee-directory-box) {\n      grid-column: span 1.5;\n    }\n    \n    /* Pointer cursor specifically for employee-directory-box */\n    #employee-directory-box {\n      cursor: pointer;\n    }\n    \n    /* Dashboard box headings */\n    .dashboard-box h2 {\n      font-size: 18px;\n      color: #2f2f2f;\n      margin-top: 8px;\n      margin-bottom: 5px;\n      text-align: center;\n      font-weight: 600;\n    }\n    \n    /* hr spacing */\n    hr {\n      margin: 0px 19px;\n    } \n    \n    /* Birthday container - max 3 cards visible, hide scrollbar but allow scrolling */\n    .birthday-list {\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n      max-height: 360px;\n      overflow-y: auto;                  /* Enable vertical scrolling */\n      padding-right: 5px;\n    \n      /* Hide scrollbar in Firefox */\n      scrollbar-width: none !important;\n    \n      /* Hide scrollbar in IE / Edge (legacy) */\n      -ms-overflow-style: none !important;\n    }\n    \n    /* Hide scrollbar in Chrome, Safari, Edge (WebKit browsers) */\n    .birthday-list::-webkit-scrollbar {\n      width: 0;\n      height: 0;\n      display: none !important;          /* Fully hide scrollbar */\n    }\n    \n    \n    .combined-list {\n      display: flex;\n      flex-direction: column;\n      gap: 0px;\n      overflow-y: auto;\n      padding-right: 5px;\n    \n      /* Hide scrollbar - cross-browser */\n      scrollbar-width: none;        /* Firefox */\n      -ms-overflow-style: none;     /* Internet Explorer / Edge */\n    }\n    \n    /* Hide scrollbar for WebKit browsers (Chrome, Safari, etc.) */\n    .combined-list::-webkit-scrollbar {\n      display: none;\n    }\n    \n        /* Hide scrollbar in Firefox */\n      scrollbar-width: none !important;\n    \n      /* Hide scrollbar in IE / Edge (legacy) */\n      -ms-overflow-style: none !important;\n    }\n    \n    }\n    \n    /* Center message style */\n    .center-message {\n      text-align: center;\n      color: #888;\n      font-size: 1.1em;\n      margin: 24px 0;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100px;\n    }\n    \n    /* Small employee cards */\n    /*Work Anniversaries / New Joiners*/\n    .small-card-list {\n      display: flex;\n      flex-direction: column;\n      gap: 17px;\n    }\n    \n    /* Employee card styling */\n    .employee-card {\n      display: flex;\n      align-items: center;\n      background: #f9f9f9;\n      padding: 7px;\n      border-radius: 10px;\n      box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n    }\n    \n    .employee-card img {\n      width: 86px;\n      height: 83px;\n      border-radius: 50%;\n      object-fit: cover;\n      margin-right: 12px;\n      border: 2px solid #ccc;\n    }\n    \n    .employee-details {\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .employee-details strong {\n      font-size: 15px;\n      font-weight: 600;\n    }\n    \n    .employee-details div {\n      font-size: 13px;\n      color: #555;\n    }\n    .indented-name {\n  margin-left: 45px; /* indent only the name */\n}\n\n\n.top3-container {\n  display: flex;\n  flex-direction: column;\n}\n\n.top3-container .points-card:not(:last-child) {\n  margin-bottom: 10px;\n}\n\n    /* Leaderboard Points Cards styling */\n    .points-list {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n    \n.points-card {\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  padding: 8px 12px;\n  background-color: #f9f9f9;\n  border-radius: 12px;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.05);\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  line-height: 1.2;\n  max-height: 50px;\n  overflow: hidden;\n}\n\n/* Medal placeholder */\n.points-card .medal {\n  min-width: 28px;  /* width similar to medal font size */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  margin-top: 0;   /* reset margin to align vertically */\n}\n\n/* For cards without medals, add empty placeholder span */\n.points-card.no-medal .medal {\n  content: '';\n  font-size: 0;   /* hide any text */\n  min-width: 28px; /* reserve space */\n}\n\n\n.name {\n  flex: 1;                   /* fill available space */\n  text-align: center;        /* center text horizontally */\n  white-space: nowrap;       /* prevent wrapping */\n}\n\n\n    \n    \n    .medal {\n      font-size: 24px;\n      margin-top: 4px;\n    }\n    \n    .info {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    }\n    \n    .name {\n      font-weight: 600;\n      font-size: 16px;\n      color: #333;\n    }\n    \n    .points {\n      font-size: 14px;\n      color: #666;\n      margin-top: 2px;\n        margin-left: 15px; \n\n    }\n    \n    /* Trophy animation */\n    .trophy {\n      display: inline-block;\n      animation: trophy-pulse 1.2s infinite ease-in-out;\n    }\n    \n    /* Buttons Container styling */\n    .points-filter-buttons,\n    .events-filter-buttons {\n      display: flex;\n      justify-content: center;\n      flex-wrap: wrap;\n      gap: 8px;\n      margin-bottom: 16px;\n    }\n    \n    .filter-btn {\n      background-color: #f0f0f0;\n      border: none;\n      padding: 6px 12px;\n      border-radius: 6px;\n      cursor: pointer;\n      font-size: 12px;\n      color: #2f2f2f;\n      transition: transform 0.1s ease, background-color 0.2s ease;\n    }\n    \n    .filter-btn.active {\n      background-color: #343a40;\n      color: white;\n    }\n    \n    .filter-btn:active {\n      transform: scale(0.92);\n    }\n    /* Event List Styling - hide scrollbar but keep scrolling */\n    /* Event List Styling - hide scrollbar but keep scrolling */\n    /* Make ONLY the event list scroll */\n    .event-list {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n      max-height: 360px;           /* About 3 cards */\n      overflow-y: auto;\n      padding-right: 5px;\n    \n      /* Hide scrollbar */\n      scrollbar-width: none !important;\n      -ms-overflow-style: none !important;\n    }\n    .event-list::-webkit-scrollbar {\n      display: none !important;\n    }\n    \n    /* Card style */\n    .event-card {\n      background-color: #f9f9f9;\n      border-radius: 8px;\n      padding: 12px 16px;\n      box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n      gap:17px\n    }\n    \n    /* Date and Subject styles */\n    .event-date {\n      font-size: 13px;\n      color: #6c757d;\n      margin-bottom: 4px;\n    }\n    .event-time {\n      font-size: 12px;\n      color: #999;\n    }\n    .event-subject {\n      font-size: 14px;\n      font-weight: 500;\n      color: #343a40;\n    }\n    /* Prevent parent containers from scrolling */\n    .dashboard-box,\n    .event-box {\n      overflow: hidden;              /* No scrolling inside these */\n      \n      /* Hide scrollbar styles just in case they overflow */\n      scrollbar-width: none !important;   /* Firefox */\n      -ms-overflow-style: none !important; /* IE/Edge */\n    }\n    .dashboard-box::-webkit-scrollbar,\n    .event-box::-webkit-scrollbar {\n      display: none !important; /* Chrome/Safari */\n    }\n    .event-box.frappe-card {\n      border: none !important;        /* Removes any visible border */\n      box-shadow: none;               /* Optional: remove shadow too if you want it flat */\n    }\n    \n    \n    \n    \n    \n    \n   /* Container for 4-column row layout */\n.info-row-4 {\n  display: flex;\n  gap: 12px;\n  justify-content: space-between;\n  flex-wrap: nowrap;    /* keep columns in one row */\n  align-items: stretch; /* equal height */\n  padding: 10px;\n  margin-bottom: 16px;\n  height: 100%;\n}\n\n/* Shared styling for info boxes and employee directory card */\n.info-box,\n.dashboard-box.employee-directory-card {\n  flex: 1;             /* equal width */\n  min-width: 0;        /* prevent overflow */\n  display: flex;\n  flex-direction: column;\n  background: #fff;\n  border-radius: 10px;\n  padding: 16px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.04);\n  box-sizing: border-box;\n  font-family: \"Inter\", sans-serif;\n  transition: all 0.3s ease;\n  overflow: hidden;\n  height: 100%;\n}\n\n/* Override for initial lighter background in info-box */\n.info-box {\n  background: #f9f9f9;\n  border: 1px solid #e3e6eb;\n  border-radius: 8px;\n  padding: 14px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n  justify-content: space-between;\n}\n\n/* Headings in info boxes */\n.info-box h3 {\n  font-size: 16px;\n  margin-bottom: 6px;\n}\n\n/* Fade animations */\n.quote-content,\n.testimonial-content,\n.announcement-content,\n.faq-content,\n.dashboard-box.employee-directory-card {\n  opacity: 1;\n  transition: opacity 0.4s ease;\n  min-height: 40px;\n}\n\n.fade-out {\n  opacity: 0;\n  transition: opacity 0.4s ease-out;\n}\n\n.fade-in {\n  opacity: 1;\n  transition: opacity 0.4s ease-in;\n}\n\n/* Hide FAQ box */\n.faq-box {\n  display: none !important;\n}\n\n/* Person name styling */\n.person-name {\n  margin-top: 6px;\n  font-style: italic;\n  font-size: 0.85em;\n  color: #555;\n}\n\n/* Employee Directory card specific styling */\n.employee-directory-card,\n#employee-directory-box {\n  background: #f9f9f9;\n  border: 1px solid #e2e2e2;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n  padding: 10px;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  max-height: 100px;\n  box-sizing: border-box;\n  width: 300px;             /* fixed width */\n  max-width: none;\n  grid-column: auto !important;\n  text-align: center;\n  user-select: none;\n  transition: box-shadow 0.2s ease;\n  justify-content: flex-start;\n  min-height: 150px;        /* optional */\n}\n.employee-directory-card,\n#employee-directory-box {\n  /* existing styles ... */\n\n  /* Hide scrollbar but allow scrolling */\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n\n.employee-directory-card::-webkit-scrollbar,\n#employee-directory-box::-webkit-scrollbar {\n  display: none; /* Chrome, Safari, Opera */\n}\n\n/* Pointer cursor for container */\n#employee-directory-box {\n  cursor: pointer;\n}\n\n/* Employee Directory card elements */\n.employee-directory-card .icon {\n  font-size: 26px;\n  margin: 4px 0 8px 0;\n}\n\n.employee-directory-card .title {\n  font-size: 15px;\n  font-weight: 600;\n  color: #343a40;\n}\n\n.employee-directory-card .subtitle {\n  font-size: 12px;\n  color: #666;\n  margin: 2px 0 12px 0;\n}\n\n.employee-directory-card .count {\n  font-size: 18px;\n  font-weight: 600;\n  color: #007bff;\n  line-height: 1.2;\n  white-space: nowrap;\n  margin-top: 8px;     /* added margin for spacing */\n}\n\n.employee-directory-card .join-percentage {\n  font-size: 13px;\n  font-weight: 500;\n  color: #28a745;\n  white-space: nowrap;\n  margin-bottom: 50px;\n}\n\n/* Dashboard box headings */\n.dashboard-box h2 {\n  font-size: 18px;\n  color: #2f2f2f;\n  margin: 8px 0 5px 0;\n  text-align: center;\n  font-weight: 600;\n}\n\n/* Header section */\n.header-section {\n  height: 170px;\n  overflow: hidden;\n  margin-bottom: 20px;\n}\n\n/* Horizontal rule spacing */\nhr {\n  margin: 0px 19px;\n}\n\n    \n    \n    .dashboard-box {\n      background: #fff;\n      border-radius: 8px;\n      padding: 1px;\n      box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n    }\n    \n    \n    .job-opening-card-list {\n      display: flex;\n      flex-direction: column; /* stack vertically */\n      gap: 12px;\n      overflow-y: auto; /* scrollable if needed */\n      scrollbar-width: none; /* Firefox */\n      -ms-overflow-style: none; /* IE and Edge */\n    }\n    \n    /* Hide scrollbar for Chrome, Safari, Edge */\n    .job-opening-card-list::-webkit-scrollbar {\n      display: none;\n      width: 0;\n      height: 0;\n    }\n    \n    .job-card {\n      background-color: #f9f9f9;\n      border-radius: 6px;\n      padding: 16px 18px;\n      font-size: 15px; /* unified card text */\n      width: 100%;\n      box-sizing: border-box;\n      transition: background 0.2s, box-shadow 0.2s;\n    }\n    \n    \n    \n    .job-link {\n      color: #007bff;\n      text-decoration: none !important; /* Force nFeo underline */\n      cursor: pointer;\n    }\n    \n    .job-title a {\n      font-weight: 600; /* semi-bold */\n      color: #525252;   /* dark gray */\n      font-size: 15px;\n      text-decoration: none !important; /* Force no underline */\n    }\n    \n    .job-title a:hover {\n      text-decoration: none !important; /* Disable underline on hover */\n    }\n    \n    .job-meta {\n      font-size: 0.95rem;\n    }\n    \n    \n    /* Remove .text-dark separate class since color is already integrated in .badge.bg-info */\n    /* Just keep .text-primary and .fw-bold separate if used elsewhere */\n    \n\n\n\n\n/* For Chrome, Safari, and Edge */\n.task-wrapper {\n  overflow: auto;\n}\n\n.task-wrapper::-webkit-scrollbar {\n  width: 0px;  /* hides the scrollbar */\n  background: transparent;\n}\n\n/* For Firefox */\n.task-wrapper {\n  scrollbar-width: none;  /* hides the scrollbar */\n  -ms-overflow-style: none;  /* hides scrollbar for IE and Edge */\n}\n\n"
 }
]