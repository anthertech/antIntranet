[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "\n\n<div class=\"dashboard-section header-section\">\n    <div class=\"info-row-4\">\n        <div class=\"info-box quote-box\">\n            <h3>üí≠ Quote of the Day</h3>\n            <div class=\"quote-content\">Loading...</div>\n        </div>\n\n        <div class=\"info-box testimonial-box\">\n            <h3>üí¨ Testimonial</h3>\n            <div class=\"testimonial-content\">Loading...</div>\n        </div>\n\n        <div class=\"info-box announcement-box\">                                     \n            <h3>üì¢ Announcements</h3>\n            <div class=\"announcement-content\">Loading...</div>\n        </div>\n\n        <div class=\"info-box faq-box small-faq-box\">\n            <h3>‚ùì FAQ</h3>\n            <div class=\"faq-content\">Loading...</div>\n        </div>\n       <div class=\"employee-directory-card\" onclick=\"window.location.href='/app/query-report/Employee Directory'\">\n  <div class=\"icon\">üë•</div>\n  <div class=\"title\">Employee</div>\n  <div class=\"subtitle\">Directory</div>\n  <div class=\"count\" id=\"employee-count\">...</div>\n</div>\n\n\n    </div>\n    \n</div>\n\n\n\n\n\n<div class=\"highlight-section\">\n  <div class=\"responsive-grid\">\n    <!-- Column 1 -->\n    <div class=\"dashboard-box\">\n      <h2> Upcoming Birthdays</h2>\n      <div class=\"birthday-list\"></div>\n    </div>\n\n    <!-- Column 2 (Merged Anniversaries & Joiners) -->\n    <div class=\"dashboard-box\">\n          <h2>Work Anniversaries</h2>\n      <div class=\"anniversary-list small-card-list\"></div>\n      <hr>\n      <h2> New Joiners</h2>\n      <div class=\"joiner-list small-card-list\"></div>\n    </div>\n\n    <!-- Column 3 -->\n    <div class=\"dashboard-box\">\n  <h2><span class=\"trophy\"></span> Leaderboard Points</h2>\n\n  <!-- Filter Buttons -->\n  <div class=\"points-filter-buttons\">\n  <button class=\"filter-btn active\" data-filter=\"week\" data-section=\"leaderboard\">This Week</button>\n  <button class=\"filter-btn\" data-filter=\"month\" data-section=\"leaderboard\">This Month</button>\n</div>\n\n  <div class=\"points-list\"></div>\n</div>\n\n    <!-- Column 4 -->\n  \n   <div class=\"dashboard-box\">\n   <div class=\"event-box frappe-card\">\n  <h2 class=\"section-title\">üìÜ Events</h2>\n  <div class=\"events-filter-buttons\">\n  <button class=\"filter-btn active\" data-filter=\"week\" data-section=\"events\">This Week</button>\n  <button class=\"filter-btn\" data-filter=\"month\" data-section=\"events\">This Month</button>\n</div>\n  <div class=\"event-list\"></div>\n</div>\n</div>\n\n  </div>\n</div>\n\n\n<div class=\"third-section\">\n  <!-- Box 1: Attendance -->\n  <div class=\"third-section-box\">\n    <h4> Attendance</h4>\n    <div class=\"attendance-wrapper\">\n      <table class=\"table table-bordered table-condensed\" id=\"attendance_table\"></table>\n    </div>\n  </div>\n\n  <!-- Box 2: Task List -->\n  <div class=\"third-section-box\">\n    <h4> Task List</h4>\n    <div class=\"task-wrapper\">\n      <table class=\"table table-bordered table-condensed\" id=\"task_table\"></table>\n    </div>\n  </div>\n</div>\n\n\n\n",
  "modified": "2025-07-31 15:04:35.527354",
  "name": "Intranet",
  "private": 0,
  "roles": [],
  "script": "\n      \n         frappe.call({\n//   method: \"frappe.client.get_list\",   \nmethod: \"intranet.intranet.api.dashboard.get_public_attendance\",\n  args: {\n        doctype: \"Attendance\",\n        filters: {\n          status: [\"in\", [\"On Leave\", \"Work From Home\"]]\n        },\n        fields: [\"employee_name\", \"attendance_date\", \"status\"],\n        order_by: \"attendance_date asc\",\n        limit_page_length: 100\n      },\n      callback: function (r) {\n        const table = root_element.querySelector(\"#attendance_table\");\n    \n        if (r.message && r.message.length > 0) {\n          // üëá Filter for today + next 30 days\n          const today = new Date(frappe.datetime.get_today());\n          const upcomingRecords = r.message.filter(entry => {\n            const entryDate = new Date(entry.attendance_date);\n            const diffDays = (entryDate - today) / (1000 * 60 * 60 * 24);\n            return diffDays >= 0 && diffDays <= 30;\n          });\n    \n          if (upcomingRecords.length === 0) {\n            table.innerHTML = \"<tr><td colspan='3'>No upcoming On Leave or Work From Home records in next 30 days.</td></tr>\";\n            return;\n          }\n    \n          const grouped = groupConsecutiveAttendance(upcomingRecords);\n          renderAttendanceTable(grouped);\n        } else {\n          table.innerHTML = \"<tr><td colspan='3'>No matching records.</td></tr>\";\n        }\n      }\n    });\n    \n    function groupConsecutiveAttendance(records) {\n      const grouped = {};\n      records.forEach(r => {\n        const key = r.employee_name + \"::\" + r.status;\n        if (!grouped[key]) grouped[key] = [];\n        grouped[key].push(r.attendance_date);\n      });\n    \n      // Sort and merge consecutive dates\n      const result = [];\n      Object.keys(grouped).forEach(key => {\n        const [employee, status] = key.split(\"::\");\n        const dates = grouped[key].sort();\n    \n        let start = dates[0];\n        let end = dates[0];\n    \n        const pushRange = () => {\n          result.push({ employee, status, from: start, to: end });\n        };\n    \n        for (let i = 1; i < dates.length; i++) {\n          const prev = new Date(end);\n          prev.setDate(prev.getDate() + 1);\n          const current = new Date(dates[i]);\n    \n          if (prev.toISOString().slice(0, 10) === dates[i]) {\n            end = dates[i]; // Extend range\n          } else {\n            pushRange();\n            start = end = dates[i]; // Start new range\n          }\n        }\n        pushRange();\n      });\n    \n      return result;\n    }\n    \n    function renderAttendanceTable(data) {\n      const table = root_element.querySelector(\"#attendance_table\");\n      let html = `\n        <thead>\n          <tr>\n            <th>Employee</th>\n            <th>Date Range</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n      `;\n    \n      data.forEach(row => {\n        const statusClass = row.status === \"Leave\" ? \"status-leave\" : \"status-wfh\";\n        const formatDate = (dateStr) => {\n      const d = new Date(dateStr);\n      const dd = String(d.getDate()).padStart(2, '0');\n      const mm = String(d.getMonth() + 1).padStart(2, '0');\n      const yy = String(d.getFullYear()).slice(-2);\n      return `${dd}-${mm}-${yy}`;\n    };\n    \n    const dateText = (row.from === row.to)\n      ? formatDate(row.from)\n      : `${formatDate(row.from)} to ${formatDate(row.to)}`;\n    \n    \n        html += `\n          <tr>\n            <td>${row.employee}</td>\n            <td>${dateText}</td>\n    <td>\n      <span class=\"badge ${row.status === 'On Leave' ? 'badge-leave' : 'badge-wfh'}\">\n        ${row.status}\n      </span>\n    </td>\n          </tr>\n        `;\n      });\n    \n      html += \"</tbody>\";\n      table.innerHTML = html;\n    }\n    \n    \n    \n    \n    frappe.call({\n        // method: \"frappe.client.get_list\",\n        method: \"intranet.intranet.api.dashboard.get_public_tasks\",\n        args: {\n          doctype: \"Task\",\n          filters: {\n            status: ['In',[\"Open\", \"Overdue\",\"Pending Review\",\"Working\"]]\n          },\n          fields: [\"name\", \"subject\", \"status\", \"project\", \"priority\"],\n        },\n        callback: function (response) {\n          if (response.message) {\n            populateTaskTable(response.message);\n          } else {\n            console.error(\"No task list data found.\");\n          }\n        },\n        error: function (xhr, status, error) {\n          console.error(\"Error fetching task list:\", error);\n        },\n      });\n    \n      function populateTaskTable(tasks) {\n        var taskTable = root_element.querySelector(\"#task_table\");\n        var tableHTML = \"<thead>\";\n        tableHTML += \"<thead><tr><th>Task ID</th><th>Task</th><th>Status</th><th>Priority</th><th>Project</th></tr></thead>\";\n        tableHTML += \"<tbody>\";\n    \n        tasks.forEach(function (task) {\n          tableHTML += \"<tr>\";\n          tableHTML += \"<td><a href='/app/task/\" + task.name + \"'>\" + task.name + \"</a></td>\";\n          tableHTML += \"<td>\" + task.subject + \"</td>\";\n    \n          var statusColor = task.status === \"Overdue\" ? \"red\" : \"green\";\n          tableHTML += \"<td style='color: \" + statusColor + \";'>\" + task.status + \"</td>\";\n    \n          var priorityColor = \"\";\n          switch(task.priority) {\n            case \"Urgent\":\n              priorityColor = \"red\";\n              break;\n            case \"High\":\n              priorityColor = \"orange\";\n              break;\n            case \"Medium\":\n              priorityColor = \"#8B8000\";\n              break;\n            case \"Low\":\n              priorityColor = \"green\";\n              break;\n            default:\n              priorityColor = \"inherit\";\n          }\n          tableHTML += \"<td style='color: \" + priorityColor + \";'>\" + task.priority + \"</td>\";\n    \n          tableHTML += \"<td><a href='/app/project/\" + task.project + \"'>\" + task.project + \"</a></td>\";\n          tableHTML += \"</tr>\";\n        });\n    \n        tableHTML += \"</tbody>\";\n    \n        taskTable.innerHTML = tableHTML;\n      }\n      \n      \n    \n    \n    \nconst today = frappe.datetime.get_today();\n\nfrappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n        doctype: 'Internal Updates',\n        fields: ['type', 'content', 'display_date', 'person_name'],\n        filters: {\n            display_date: today\n        },\n        order_by: 'display_date desc',\n        limit: 20\n    },\n    callback: function (res) {\n        let todayData = res.message || [];\n\n        // Fetch most recent past entries if today's data is not available for some type\n        function getLatestDataForType(type) {\n            const todays = todayData.filter(item => item.type === type);\n            if (todays.length > 0 || type === 'Announcements') {\n                return Promise.resolve(todays);\n            }\n\n            return new Promise(resolve => {\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Internal Updates',\n                        fields: ['type', 'content', 'display_date', 'person_name'],\n                        filters: { type },\n                        order_by: 'display_date desc',\n                        limit: 10\n                    },\n                    callback: function (pastRes) {\n                        const past = pastRes.message || [];\n                        if (past.length === 0) return resolve([]);\n\n                        // Get only the most recent past date's entries\n                        const latestDate = past[0].display_date;\n                        const latestEntries = past.filter(item => item.display_date === latestDate);\n                        resolve(latestEntries);\n                    }\n                });\n            });\n        }\n\n        function fadeContent(container, newHtml) {\n            container.classList.remove('fade-in');\n            container.classList.add('fade-out');\n\n            setTimeout(() => {\n                container.innerHTML = newHtml;\n                container.classList.remove('fade-out');\n                container.classList.add('fade-in');\n            }, 400);\n        }\n\n        function rotateEntries(type, selector) {\n            getLatestDataForType(type).then(entries => {\n                const container = root_element.querySelector(selector);\n                if (!entries || entries.length === 0) {\n                    container.innerHTML = `No ${type.toLowerCase()}.`;\n                    return;\n                }\n\n                const items = entries.map(update => `\n                    <div class=\"main-content\">${update.content}</div>\n                    ${update.person_name ? `<div class=\"person-name\">- ${update.person_name}</div>` : ''}\n                `);\n\n                let index = 0;\n                container.innerHTML = items[index];\n                container.classList.add('fade-in');\n\n                if (items.length > 1) {\n                    setInterval(() => {\n                        index = (index + 1) % items.length;\n                        fadeContent(container, items[index]);\n                    }, 4000);\n                }\n            });\n        }\n\n        // Run sections\n        rotateEntries('Quote of the Day', '.quote-content');\n        rotateEntries('Testimonials', '.testimonial-content');\n        rotateEntries('Announcements', '.announcement-content'); // Only today's\n    }\n});\n\n\n//employee directory card\n\nfrappe.call({\n  method: \"frappe.client.get_count\",\n  args: {\n    doctype: \"Employee\",\n    filters: {\n      status: \"Active\"\n    }\n  },\n  callback: function (r) {\n    if (r.message !== undefined) {\n      const countElement = root_element.querySelector(\"#employee-count\");\n      countElement.textContent = `${r.message} Employees`;\n    }\n  }\n});\n\n\nconst makeCard = (emp, extraLines = [], cardClass = '') => `\n    <div class=\"employee-card ${cardClass}\" id=\"card-${emp.name}\">\n        <img src=\"${emp.image || '/assets/frappe/images/ui/avatar.png'}\" />\n        <div class=\"employee-details\">\n            <strong>${emp.employee_name}</strong>\n            <div>${emp.designation || ''}</div>\n            <div>${emp.company || ''}</div>\n            ${extraLines.map(line => `<div>${line}</div>`).join('')}\n        </div>\n        ${emp.isToday ? `<canvas class=\"confetti-canvas\" id=\"confetti-${emp.name}\"></canvas>` : ''}\n    </div>`;\n    \n    function getBirthdayInfo(dob) {\n        const now = new Date();\n        const bday = new Date(dob);\n        bday.setFullYear(now.getFullYear());\n    \n        const isToday = bday.getDate() === now.getDate() && bday.getMonth() === now.getMonth();\n        if (bday < now && !isToday) bday.setFullYear(now.getFullYear() + 1);\n    \n        return {\n            isToday,\n            upcomingDate: bday,\n            daysLeft: Math.floor((bday - now) / (1000 * 60 * 60 * 24))\n        };\n    }\n    \n    function formatDate(date) {\n        return new Date(date).toLocaleDateString('en-IN', { day: 'numeric', month: 'short', year: 'numeric' });\n    }\n    \n    function getOrdinal(n) {\n        const suffixes = [\"th\", \"st\", \"nd\", \"rd\"];\n        const v = n % 100;\n        return n + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]);\n    }\n    \n    frappe.call({\n    method: 'intranet.intranet.api.dashboard.get_all_employee_details',\n\n        args: {\n            doctype: 'Employee',\n            fields: ['name', 'employee_name', 'image', 'date_of_birth', 'date_of_joining', 'designation', 'company'],\n            limit: 100\n        },\n        callback: function(res) {\n            if (!res.message) return;\n            const now = new Date();\n            const birthdayList = [], anniversaryList = [], joinerList = [];\n    \n            res.message.forEach(emp => {\n                let dob = emp.date_of_birth ? new Date(emp.date_of_birth) : null;\n                let doj = emp.date_of_joining ? new Date(emp.date_of_joining) : null;\n    \n                // Birthdays in next 60 days\n                if (dob) {\n                    const bInfo = getBirthdayInfo(dob);\n                    if (bInfo.daysLeft <= 60 || bInfo.isToday) {\n                        birthdayList.push({ ...emp, ...bInfo });\n                    }\n                }\n    \n                // Work anniversaries in next 30 days\n                if (doj) {\n                    const dojThisYear = new Date(now.getFullYear(), doj.getMonth(), doj.getDate());\n                    const daysToAnniversary = Math.floor((dojThisYear - now) / (1000 * 60 * 60 * 24));\n                    const years = now.getFullYear() - doj.getFullYear();\n                    if (daysToAnniversary >= 0 && daysToAnniversary <= 30 && years >= 1) {\n                        anniversaryList.push({ ...emp, doj, years, anniversary: dojThisYear });\n                    }\n                }\n    \n                // New joiners within last 30 days\n                if (doj && (now - doj) / (1000 * 60 * 60 * 24) <= 30) {\n                    joinerList.push({ ...emp, doj });\n                }\n            });\n    \n            const makeCard = (emp, extraLines = [], cardClass = '') => `\n                <div class=\"employee-card ${cardClass}\">\n                    <img src=\"${emp.image || '/assets/frappe/images/ui/avatar.png'}\" />\n                    <div class=\"employee-details\">\n                        <strong>${emp.employee_name}</strong>\n                        <div>${emp.designation || ''}</div>\n                        <div>${emp.company || ''}</div>\n                        ${extraLines.map(line => `<div>${line}</div>`).join('')}\n                    </div>\n                </div>`;\n    \n           let bList = root_element.querySelector('.birthday-list');\n\nconst showBirthdayCards = (list) => {\n  if (!list || list.length === 0) {\n    bList.innerHTML = '<p>No upcoming birthdays.</p>';\n    return;\n  }\n\n  // Show all in scrollable container if more than 3\n  bList.innerHTML = list.map(emp => {\n    const bdate = formatDate(emp.upcomingDate);\n    return makeCard(emp, [`üéÇ Birthday: ${bdate}`], emp.isToday ? 'birthday-today' : '');\n  }).join('');\n};\n\n// Sort birthdays: today's first\nbirthdayList.sort((a, b) => {\n  if (a.isToday && !b.isToday) return -1;\n  if (!a.isToday && b.isToday) return 1;\n  return a.daysLeft - b.daysLeft;\n});\n\n// Filter birthdays within 30 days\nconst birthdayIn30Days = birthdayList.filter(emp => emp.daysLeft <= 30);\n\n// Show them all in scroll container\nshowBirthdayCards(birthdayIn30Days);\n\n// üéâ Confetti if any is today\nif (birthdayIn30Days.some(emp => emp.isToday)) {\n  setTimeout(() => {\n    confetti({\n      particleCount: 150,\n      spread: 80,\n      origin: { y: 0.6 },\n      zIndex: 9999\n    });\n  }, 500);\n}\n\n    \n            // Anniversaries\n            root_element.querySelector('.anniversary-list').innerHTML = anniversaryList.slice(0, 3).map(emp => {\n                const annivDate = formatDate(emp.anniversary);\n                return makeCard(emp, [\n                    `üéâ ${getOrdinal(emp.years)} Anniversary on ${annivDate}`,\n                    \n                ]);\n            }).join('');\n    \n            // New Joiners\n            root_element.querySelector('.joiner-list').innerHTML = joinerList.slice(0, 3).map(emp =>\n                makeCard(emp, [`üëã Joined: ${formatDate(emp.doj)}`])\n            ).join('');\n        }\n    });\n    \n\n\n\n\n\n\n\nfunction getDateRange(filter) {\n  const today = frappe.datetime.get_today();\n  if (filter === 'week') {\n    return {\n      start: frappe.datetime.week_start(),\n      end: frappe.datetime.week_end()\n    };\n  }\n  if (filter === 'month') {\n    return {\n      start: frappe.datetime.month_start(),\n      end: frappe.datetime.month_end()\n    };\n  }\n  return { start: today, end: today };\n}\nfunction loadLeaderboardPoints(filter = 'week') {\n  const { start, end } = getDateRange(filter);\n\n  frappe.call({\n    method: 'intranet.intranet.api.dashboard.get_energy_point_logs',\n    args: { start_date: start, end_date: end },\n    callback: function (res) {\n      const logs = res.message || [];\n      const userPoints = {};\n\n      logs.forEach(log => {\n        if (!log.user) return;\n        userPoints[log.user] = (userPoints[log.user] || 0) + Number(log.points);  // ensure numeric addition\n      });\n\n      const users = Object.keys(userPoints);\n      if (users.length === 0) {\n        root_element.querySelector('.points-list').innerHTML = '<p>No points found.</p>';\n        return;\n      }\n\n      frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n          doctype: 'Employee',\n          filters: { user_id: ['in', users] },  // Verify this field (see below)\n          fields: ['user_id', 'employee_name'],\n          limit_page_length: 1000\n        },\n        callback: function (empRes) {\n          const empMap = {};\n          (empRes.message || []).forEach(emp => {\n            empMap[emp.user_id] = emp.employee_name;\n          });\n\n          if (Object.keys(empMap).length === 0) {\n            console.warn('Employee mapping empty: Check if user_id field matches Energy Point Log user values');\n          }\n\n          const ranked = Object.entries(userPoints)\n            .filter(([user]) => empMap[user])\n            .map(([user, points]) => ({\n              employee_name: empMap[user],\n              points\n            }))\n            .sort((a, b) => b.points - a.points)\n            .slice(0, 3);\n\n          const medals = ['ü•á', 'ü•à', 'ü•â'];\n          const container = root_element.querySelector('.points-list');\n          container.innerHTML = '';\n\n          ranked.forEach((entry, i) => {\n            const div = document.createElement('div');\n            div.className = 'points-card' + (i === 0 ? ' glow' : '');\n            div.innerHTML = `\n              <span class=\"medal\">${medals[i]}</span>\n              <div class=\"info\">\n                <div class=\"name\">${entry.employee_name}</div>\n                <div class=\"points\">${entry.points} points</div>\n              </div>\n            `;\n            container.appendChild(div);\n          });\n        }\n      });\n    }\n  });\n}\n\n\n// üéØ Helper: Date filter for leaderboard logs\nfunction getDateFilterForLeaderboard(filter) {\n  const { start, end } = getDateRange(filter);\n  return {\n    creation: ['between', [start, end]]\n  };\n}\n\n\nfunction loadEvents(filter = 'week') {\n  const { start, end } = getDateRange(filter);\n\n  frappe.call({\n    method: 'intranet.intranet.api.dashboard.get_employee_events',\n    args: {\n      start: start,\n      end: end\n    },\n    callback: function (res) {\n      const list = res.message || [];\n      const container = root_element.querySelector('.event-list');\n      container.innerHTML = list.length === 0\n        ? '<p>No events found.</p>'\n        : list.map(evt => {\n            const dt = frappe.datetime.str_to_obj(evt.starts_on);\n            const datePart = frappe.datetime.obj_to_user(dt).split(' ')[0];\n            const timePart = dt.toLocaleTimeString('en-IN', {\n              hour: '2-digit',\n              minute: '2-digit'\n            });\n\n            return `\n              <div class=\"event-card\">\n                <div class=\"event-date\"><strong>${datePart}</strong> <span class=\"event-time\">${timePart}</span></div>\n                <div class=\"event-subject\">üìå ${evt.subject}</div>\n              </div>\n            `;\n          }).join('');\n    }\n  });\n}\n\n\n// üîÑ Filter buttons for both leaderboard and events\nroot_element.querySelectorAll('.filter-btn').forEach(btn => {\n  btn.addEventListener('click', () => {\n    const section = btn.dataset.section;\n    const filter = btn.dataset.filter;\n\n    // Remove previous active buttons in the same section\n    root_element.querySelectorAll(`.filter-btn[data-section=\"${section}\"]`)\n      .forEach(b => b.classList.remove('active'));\n\n    btn.classList.add('active');\n\n    if (section === 'events') loadEvents(filter);\n    if (section === 'leaderboard') loadLeaderboardPoints(filter);\n  });\n});\n\n// üîÉ Initial loads\nloadLeaderboardPoints('week');\nloadEvents('week');\n\n\n      ",
  "style": "\n.employee-directory-card {\n  width: 150px;\n  height: 150px;\n  background-color: #ffffff;\n  border: 1px solid #e2e2e2;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.04);\n  padding: 10px;\n  text-align: center;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  transition: box-shadow 0.2s ease;\n}\n\n.employee-directory-card:hover {\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.employee-directory-card .icon {\n  font-size: 26px;\n  margin-top: 4px;\n}\n\n.employee-directory-card .title {\n  font-size: 13px;\n  font-weight: 600;\n  color: #343a40;\n  margin-top: 4px;\n}\n\n.employee-directory-card .subtitle {\n  font-size: 11px;\n  color: #666;\n  margin-top: -4px;\n}\n\n.employee-directory-card .count {\n  font-size: 12px;\n  font-weight: 500;\n  color: #007bff;\n  margin-bottom: 4px;\n}\n\n.third-section {\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n  width: 100%;\n  margin-top: 10px;\n}\n\n/* Ensure exactly 50% width */\n.third-section-box {\n  width: 50%;\n}\n\n/* Table Wrappers */\n.attendance-wrapper,\n.task-wrapper {\n  max-height: 180px;\n  overflow-y: auto;\n  border: 1px solid #e0e0e0;\n  border-radius: 6px;\n}\n\n/* Common Table Styles */\n#attendance_table,\n#task_table {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 13px;\n}\n\n#attendance_table thead,\n#task_table thead {\n  background-color: #f8f8f8;\n  font-weight: 600;\n}\n\n#attendance_table th,\n#attendance_table td,\n#task_table th,\n#task_table td {\n  padding: 6px 10px;\n  border-bottom: 1px solid #eee;\n}\n\n/* Attendance Status Colors */\n#attendance_table td.status-leave {\n  color: #d9534f;\n  font-weight: bold;\n}\n\n#attendance_table td.status-wfh {\n  color: #0275d8;\n  font-weight: bold;\n}\n\n/* Scrollbar Styling */\n.attendance-wrapper::-webkit-scrollbar,\n.task-wrapper::-webkit-scrollbar {\n  width: 5px;\n}\n.attendance-wrapper::-webkit-scrollbar-thumb,\n.task-wrapper::-webkit-scrollbar-thumb {\n  background: #ccc;\n  border-radius: 5px;\n}\n\n/* Badges */\n.badge {\n  display: inline-block;\n  padding: 2px 8px;\n  font-size: 12px;\n  font-weight: 500;\n  border-radius: 10px;\n  text-transform: capitalize;\n}\n\n.badge-leave {\n  background-color: #f8d0c1;\n  color: #bd3e0c;\n}\n\n.badge-wfh {\n  background-color: #cce7f8;\n  color: #0070cc;\n}\n\n\n.header-section {\n  height: 170px; /* or any height you prefer */\n  overflow: hidden;\n  margin-bottom: 20px;\n}\n\n.info-row-4 {\n  display: flex;\n  gap: 12px;\n  height: 100%;\n}\n\n.info-box {\n  flex: 1;\n  background: #f9f9f9;\n  border-radius: 10px;\n  padding: 14px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.04);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  overflow: hidden;\n}\n\n.info-box h3 {\n  font-size: 16px;\n  margin-bottom: 6px;\n}\n\n\n\n/* 4-column row layout */\n.info-row-4 {\n    display: flex;\n    gap: 12px;\n    justify-content: space-between;\n    padding: 10px;\n    margin-bottom: 16px;\n    flex-wrap: nowrap;\n    align-items: stretch;\n}\n\n/* Card-style box */\n.info-box {\n    background: #fff;\n    border: 1px solid #e3e6eb;\n    border-radius: 8px;\n    padding: 16px;\n    box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n    transition: all 0.3s ease;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    font-family: \"Inter\", sans-serif;\n}\n\n\n\n/* Fade Animations */\n/* Fade Animations */\n.quote-content,\n.testimonial-content,\n.announcement-content,\n.faq-content {\n  opacity: 1;\n  transition: opacity 0.4s ease;\n  min-height: 40px;\n}\n\n.fade-out {\n  opacity: 0;\n  transition: opacity 0.4s ease-out;\n}\n\n.fade-in {\n  opacity: 1;\n  transition: opacity 0.4s ease-in;\n}\n\n\n.info-box {\n  display: block; /* or flex with justify-content: flex-start */\n  height: auto;   /* avoid fixed heights unless required */\n}\n\n\n.faq-box {\n  display: none !important;\n}\n\n\n.person-name {\n    margin-top: 6px; /* reduced margin */\n    font-style: italic;\n    font-size: 0.85em; /* slightly smaller font */\n    color: #555;\n}\n\n\n Main layout: 4 columns that shrink/wrap if needed */\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  padding: 10px;\n}\n\n/* Responsive Grid Container */\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n  gap: 20px;\n  /*padding: 10px;*/\n  width: 100%;\n  box-sizing: border-box;\n}\n\n/* Box UI */\n.dashboard-box {\n  background: #fff;\n  padding: 10px;\n  border-radius: 14px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n  display: flex;\n  flex-direction: column;\n  max-height: 370px;  /* Set max height */\n  overflow: hidden;   /* Prevent content overflow */\n  transition: transform 0.3s ease;\n  box-sizing: border-box;\n}\n\n.dashboard-box {\n  ...\n  max-height: 100px;\n  overflow-y: auto;\n}\n\n.dashboard-box:hover {\n  transform: translateY(-3px);\n}\n\n.dashboard-box h2 {\n  font-size: 18px;\n  color: #2f2f2f;\n  margin-bottom:5px;\n  text-align: center;\n  font-weight: 600;\n}\n\n.dashboard-box h2 {\n  margin-top: 8px;  /* Adjust as needed */\n  margin-bottom: 5px; /* Reduce space below the h2 */\n}\n\nhr {\n  margin: 0px 19px; /* Reduce vertical space around the <hr> */\n}\n\n\n\n\n\n\n/* Birthday container - max 3 cards visible */\n.birthday-list {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-height: 360px; /* ~3 cards height */\n  overflow-y: auto;\n  padding-right: 5px;\n}\n\n/* Anniversary + Joiners container - max 2 cards each */\n.anniversary-list,\n.joiner-list {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-height: 250px; /* Adjust for 2 cards */\n  overflow-y: auto;\n  padding-right: 5px;\n}\n\n\n\n\n/* Small employee cards */\n.small-card-list {\n  display: flex;\n  flex-direction: column;\n  gap: 32px; /* Adjust spacing as needed */\n}\n\n\n.employee-card {\n  display: flex;\n  align-items: center;\n  background: #f9f9f9;\n  padding: 7px;\n  border-radius: 10px;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n}\n\n.employee-card img {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 12px;\n  border: 2px solid #ccc;\n}\n\n.employee-details {\n  display: flex;\n  flex-direction: column;\n}\n\n.employee-details strong {\n  font-size: 15px;\n  font-weight: 600;\n}\n\n.employee-details div {\n  font-size: 13px;\n  color: #555;\n}\n\n/* Leaderboard Points Cards */\n.points-list {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.points-card {\n  display: flex;\n  align-items: flex-start;\n  gap: 14px;\n  padding: 14px 18px;\n  background-color: #f9f9f9;\n  border-radius: 12px;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.05);\n  transition: transform 0.3s ease;\n}\n\n.points-card:hover {\n  transform: scale(1.015);\n}\n\n.medal {\n  font-size: 24px;\n  margin-top: 4px;\n}\n\n.info {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.name {\n  font-weight: 600;\n  font-size: 16px;\n  color: #333;\n}\n\n.points {\n  font-size: 14px;\n  color: #666;\n  margin-top: 2px;\n}\n\n/* Trophy animation */\n/*@keyframes trophy-pulse {*/\n/*  0%, 100% { transform: scale(1); opacity: 1; }*/\n/*  50% { transform: scale(1.15); opacity: 0.85; }*/\n/*}*/\n\n.trophy {\n  display: inline-block;\n  animation: trophy-pulse 1.2s infinite ease-in-out;\n}\n\n\n\n/* Buttons Container */\n.points-filter-buttons,\n.events-filter-buttons {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.filter-btn {\n  background-color: #f0f0f0;\n  border: none;\n  padding: 6px 12px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  color: #2f2f2f;\n  transition: transform 0.1s ease, background-color 0.2s ease;\n}\n\n.filter-btn.active {\n  background-color: #343a40;\n  color: white;\n}\n\n.filter-btn:active {\n  transform: scale(0.92);\n}\n\n/* Event List Styling */\n.event-list {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-height: 350px;\n  overflow-y: auto;\n  padding-right: 5px;\n}\n\n/* Event Card Style */\n.event-card {\n  background-color: #fff;\n  border: 1px solid #e2e2e2;\n  border-radius: 8px;\n  padding: 12px 16px;\n  font-size: 14px;\n  color: #333;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n}\n\n/* Scrollbar (Minimal) */\n.event-list::-webkit-scrollbar {\n  width: 6px;\n}   \n.event-list::-webkit-scrollbar-thumb {\n  background-color: #ccc;\n  border-radius: 10px;\n}\n"
 }
]